window.wized_config = window.wized_config || [];
window.wized_config.push({"projectId":"RWkd5GZ6NGINV6xIUua4","version":2,"createdTimestamp":1741795780,"type":"development","showBranding":false,"id":"DXBaLYcbmDBzK2Z3lWOD","publishedTimestamp":1756946928,"updatedTimestamp":1756946920,"cookies":[{"id":"zuOcDH0XHL0yp0ca57vY","expires":30,"name":"favorites"}],"folders":[],"parameters":[{"id":"SIxD7MdjHmSP1TXKpcVz","name":"type"}],"variables":[{"initialValue":"return 0;","name":"j","id":"0EMJih42QdwTZBlAP6tf"},{"name":"filteredFloorplans","id":"2YbgDz8TT81MTtiB0f7J"},{"id":"4d4rS7AqKsnpb3oTdSRn","name":"computedMedia","initialValue":"return (function () {\n  // If there's no selectedMedia or no selection at all, return empty\n  if (!v.selectedMedia) {\n    return \"\";\n  }\n\n  // Check if apt or plan is selected\n  const hasApt  = Boolean(v.selectedApt);\n  const hasPlan = Boolean(v.selectedFloorPlan);\n\n  //\n  // A) If we have a selected apartment\n  //\n  if (hasApt) {\n    // Grab that apartmentâ€™s data\n    const aptObj =\n      v.filteredUnits?.[0] ||\n      (v.computedUnits || []).find(u => u.unit === v.selectedApt);\n    if (!aptObj) return \"\";\n\n    // Photos / Video / Virtual references\n    const aptPhotos  = aptObj.floorplan?.[0]?.gallery?.[0]?.images || [];\n    const aptVideo   = aptObj.floorplan?.[0]?.floorplanVideo?.[0]?.url || \"\";\n    const aptVirtual = aptObj.floorplan?.[0]?.floorplanVirtual || \"\";\n\n    // If v.selectedMedia is valid for this apt, keep it; otherwise \"\"\n    switch (v.selectedMedia) {\n      case \"photos\":\n        return aptPhotos.length > 0 ? \"photos\" : \"\";\n      case \"video\":\n        return aptVideo ? \"video\" : \"\";\n      case \"virtual\":\n        return aptVirtual ? \"virtual\" : \"\";\n      default:\n        return \"\";\n    }\n  }\n\n  //\n  // B) If no apartment => maybe there's a selected floor plan\n  //\n  if (hasPlan) {\n    const planObj = v.computedFloorPlan?.[0];\n    if (!planObj) return \"\";\n\n    // Photos / Video / Virtual references\n    const planVirtual = planObj.floorplanVirtual || \"\";\n    const planPhotos  = planObj.gallery?.[0]?.images || [];\n    const planVideo   = planObj.floorplanVideo?.[0]?.url || \"\";\n\n    // If v.selectedMedia is valid for this plan, keep it; otherwise \"\"\n    switch (v.selectedMedia) {\n      case \"virtual\":\n        return planVirtual ? \"virtual\" : \"\";\n      case \"photos\":\n        return planPhotos.length > 0 ? \"photos\" : \"\";\n      case \"video\":\n        return planVideo ? \"video\" : \"\";\n      default:\n        return \"\";\n    }\n  }\n\n  //\n  // C) Neither apt nor plan => \"\"\n  //\n  return \"\";\n})();","computed":true},{"name":"toggleFloorPlan","id":"4khMHUrFe4NNsqfgwv84"},{"name":"computedFloorPlan","computed":true,"initialValue":"return (function() {\n  // 1) Ensure v.selectedFloorPlan is a string, like \"a1\"\n  if (!v.selectedFloorPlan) {\n    // If empty, return []\n    return [];\n  }\n\n  // 2) Grab all plans\n  const allPlans = Array.isArray(v.filteredFloorplans) ? v.filteredFloorplans : [];\n\n  // 3) Find the single matching plan\n  const matched = allPlans.filter((fp) => fp.handle === v.selectedFloorPlan);\n\n  // 4) Return the resulting array (typically length 1 or 0)\n  return matched;\n})();","id":"6BkPMpPBU6wtn7lpeyuq"},{"id":"6JvrYaU1dhUfleBt0Sbn","name":"selectedMedia"},{"id":"70yxwFeTHX369DxN1zY2","name":"floors"},{"name":"doParamsUpdate","initialValue":"return false;","id":"BP6cE1aHj3BNyqwCWBj6"},{"name":"sortMethod","id":"C6WIFV6ls6T5Ocb83hJr","initialValue":"return \"alphabetical\";"},{"initialValue":"return true;","name":"showFloorPlanFilter","id":"Ht6n7F0bpUXLCQPphvNZ"},{"id":"JLS5tDVYbpBgFqpvQRSV","name":"featureGroups","initialValue":"return (function () {\n  /********************************************************************\n   * STEP 0: Rebuild a local â€œmergedâ€ array from rawUnits\n   ********************************************************************/\n  const localMerged = JSON.parse(JSON.stringify(v.rawUnits || []));\n\n  function slugify(str) {\n    return (str || \"\")\n      .toLowerCase()\n      // Allow 'Â½'\n      .replace(/[^a-z0-9Â½]+/g, \"-\")\n      .replace(/^-+|-+$/g, \"\");\n  }\n\n  // Merge featuresImport + specials\n  localMerged.forEach((unit) => {\n    if (!Array.isArray(unit.features)) {\n      unit.features = [];\n    }\n\n    // A) featuresImport\n    const fiArray = Array.isArray(unit.featuresImport) ? unit.featuresImport : [];\n    if (fiArray.length > 0) {\n      const fi = fiArray[0];\n      [\"interior\", \"exterior\", \"location\", \"extras\"].forEach((cat) => {\n        const rawStr = fi[cat] || \"\";\n        const items = rawStr\n          .split(\",\")\n          .map((s) => s.trim())\n          .filter(Boolean);\n        items.forEach((name) => {\n          const handle = slugify(name);\n          if (!unit.features.some((f) => f.handle === handle)) {\n            unit.features.push({ name, handle });\n          }\n        });\n      });\n    }\n\n    // B) specials\n    const specials = Array.isArray(unit.specials) ? unit.specials : [];\n    specials.forEach((s) => {\n      const name = s.name || \"\";\n      const handle = s.handle || slugify(name);\n      if (!unit.features.some((f) => f.handle === handle)) {\n        unit.features.push({ name, handle });\n      }\n    });\n  });\n\n  /********************************************************************\n   * STEP 1: Filter by v.selectedType if you want the groups only for that bed type\n   ********************************************************************/\n  let filteredUnits = localMerged;\n  if (v.selectedType) {\n    const typeLower = v.selectedType.toLowerCase();\n    filteredUnits = filteredUnits.filter((unit) => {\n      const planType =\n        unit.floorplan?.[0]?.type?.[0]?.handle?.toLowerCase() || \"\";\n      return planType === typeLower;\n    });\n  }\n\n  /********************************************************************\n   * STEP 2: Gather all features from the filtered units\n   ********************************************************************/\n  const aggregated = {\n    specials: [],\n    interior: [],\n    exterior: [],\n    location: [],\n    extras: []\n  };\n\n  function splitCsv(str) {\n    return (str || \"\")\n      .split(\",\")\n      .map((s) => s.trim())\n      .filter(Boolean);\n  }\n\n  filteredUnits.forEach((unit) => {\n    // A) featuresImport\n    if (Array.isArray(unit.featuresImport) && unit.featuresImport.length) {\n      const fi = unit.featuresImport[0];\n      aggregated.interior.push(...splitCsv(fi.interior));\n      aggregated.exterior.push(...splitCsv(fi.exterior));\n      aggregated.location.push(...splitCsv(fi.location));\n      aggregated.extras.push(...splitCsv(fi.extras));\n    }\n    // B) specials => push each special name\n    if (Array.isArray(unit.specials)) {\n      aggregated.specials.push(...unit.specials.map((s) => s.name).filter(Boolean));\n    }\n  });\n\n  // Deduplicate each category\n  function unique(arr) {\n    return [...new Set(arr)];\n  }\n  aggregated.interior = unique(aggregated.interior);\n  aggregated.exterior = unique(aggregated.exterior);\n  aggregated.location = unique(aggregated.location);\n  aggregated.extras = unique(aggregated.extras);\n  aggregated.specials = unique(aggregated.specials);\n\n  /********************************************************************\n   * STEP 3: Build the final â€œfeatureGroupsâ€ array\n   ********************************************************************/\n  // We'll reuse the same slugify for consistency:\n  const categories = [\n    { id: \"specials\", name: \"Specials\", features: aggregated.specials },\n    { id: \"interior\", name: \"Interior\", features: aggregated.interior },\n    { id: \"exterior\", name: \"Exterior\", features: aggregated.exterior },\n    { id: \"location\", name: \"Location\", features: aggregated.location },\n    { id: \"extras\",   name: \"Extras\",   features: aggregated.extras }\n  ];\n\n  const featureGroups = categories.map((cat) => ({\n    categoryId: cat.id,\n    categoryName: cat.name,\n    features: cat.features.map((feat) => ({\n      name: feat,\n      handle: slugify(feat)  // keep Â½ or convert it, your choice\n    }))\n  }));\n\n  /********************************************************************\n   * STEP 4: Return final array\n   ********************************************************************/\n  return featureGroups;\n})();","computed":true},{"initialValue":"return \"\";","name":"selectedApt","id":"Lkcv67FYpZUI6TF8H6Tp"},{"initialValue":"return [];","name":"rawUnits","id":"QoBE6aZKPcHbPYDdZNpG"},{"id":"W0rnQrVsDJb2DU3eOsUV","name":"computedPlanView","initialValue":"return (function() {\n  // 1) Default the rawView to \"map\" if none is set\n  const rawView = v.selectedPlanView || \"map\";\n\n  // 2) If an apartment is selected => handle \"map\"/\"3D\"/otherwise\n  if (v.selectedApt) {\n    if (rawView === \"map\")  return \"Floor Map\";\n    if (rawView === \"3D\")   return \"3D\";\n    return \"2D\";  // covers \"2D\" or any other fallback\n  }\n\n  // 3) If a floor plan is selected => no \"map\"\n  if (v.selectedFloorPlan) {\n    if (rawView === \"3D\")  return \"3D\";\n    return \"2D\";  // treat everything else (including \"map\") as \"2D\"\n  }\n\n  // 4) If neither apt nor plan => empty\n  return \"\";\n})();","computed":true},{"id":"X7l0yBtDFGOAGFVo9fvf","name":"computedUnits","initialValue":"return (function() {\n  /********************************************************************\n    Helpers (letter-safe unit parsing/normalization)\n  ********************************************************************/\n  function normalizeUnit(s) {\n    return (s || \"\").toString().replace(/\\s+/g, \"\").toUpperCase();\n  }\n  // \"109E\" / \"109 E\" / \"109\" -> { unitNum:\"109\", floor:\"1\", wing:\"E\" | \"\" }\n  function parseUnitParts(s) {\n    const m = (s || \"\").toString().trim().match(/(\\d{3})\\s*([A-Za-z])?$/);\n    if (!m) return { unitNum: \"\", floor: \"\", wing: \"\" };\n    return { unitNum: m[1], floor: m[1].charAt(0), wing: (m[2] || \"\").toUpperCase() };\n  }\n\n  /********************************************************************\n    STEP 0: Merge featuresImport & specials into each unit's .features\n  ********************************************************************/\n  const mergedUnits = JSON.parse(JSON.stringify(v.rawUnits || []));\n\n  function slugify(str) {\n    return (str || \"\")\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/^-+|-+$/g, \"\");\n  }\n\n  mergedUnits.forEach((unit) => {\n    if (!Array.isArray(unit.features)) {\n      unit.features = [];\n    }\n\n    // A) Merge featuresImport\n    const fiArray = Array.isArray(unit.featuresImport) ? unit.featuresImport : [];\n    if (fiArray.length > 0) {\n      const fi = fiArray[0];\n      [\"interior\", \"exterior\", \"location\", \"extras\"].forEach((cat) => {\n        const rawStr = fi[cat] || \"\";\n        const items = rawStr.split(\",\").map((s) => s.trim()).filter(Boolean);\n        items.forEach((name) => {\n          const handle = slugify(name);\n          if (!unit.features.some((f) => f.handle === handle)) {\n            unit.features.push({ name, handle });\n          }\n        });\n      });\n    }\n\n    // B) Merge specials\n    const specials = Array.isArray(unit.specials) ? unit.specials : [];\n    specials.forEach((s) => {\n      const name = s.name || \"\";\n      const handle = s.handle || slugify(name);\n      if (!unit.features.some((f) => f.handle === handle)) {\n        unit.features.push({ name, handle });\n      }\n    });\n\n    // C) ADD: canonical + parsed fields (does not change your original .unit)\n    const original = unit.unit || \"\";\n    const canonical = normalizeUnit(original);     // \"109E\"\n    const parts = parseUnitParts(original);        // { unitNum:\"109\", floor:\"1\", wing:\"E\" }\n\n    unit.unitCanonical = canonical;                // letter/space-insensitive key\n    unit.unitNum = parts.unitNum;                  // \"109\"\n    unit.floor = parts.floor;                      // \"1\"\n    unit.wing = parts.wing;                        // \"E\" or \"\"\n  });\n\n  /********************************************************************\n    STEP 1: Start with mergedUnits\n  ********************************************************************/\n  let filtered = mergedUnits;\n\n  /********************************************************************\n    STEP 2: Filter by v.selectedType\n  ********************************************************************/\n  if (v.selectedType) {\n    const typeLower = v.selectedType.toLowerCase();\n    filtered = filtered.filter((unit) => {\n      const planType = unit.floorplan?.[0]?.type?.[0]?.handle?.toLowerCase() || \"\";\n      return planType === typeLower;\n    });\n  }\n\n  /********************************************************************\n    STEP 3: Check EITHER v.toggleFloorPlan OR v.selectedFloorPlan\n             => whichever is non-empty\n  ********************************************************************/\n  const chosenHandle = v.toggleFloorPlan || v.selectedFloorPlan || \"\";\n  if (chosenHandle) {\n    filtered = filtered.filter((unit) => {\n      const planHandle = unit.floorplan?.[0]?.handle || \"\";\n      return planHandle === chosenHandle;\n    });\n  }\n\n  /********************************************************************\n    STEP 4: Sort by v.sortMethod\n  ********************************************************************/\n  const sortMethod = v.sortMethod || \"rent\";\n  if (sortMethod === \"rent\") {\n    filtered.sort((a, b) => {\n      const rentA = parseFloat((a.minrent || \"\").replace(/[^\\d.]/g, \"\")) || 0;\n      const rentB = parseFloat((b.minrent || \"\").replace(/[^\\d.]/g, \"\")) || 0;\n      return rentA - rentB;\n    });\n  } else if (sortMethod === \"availability\") {\n    filtered.sort((a, b) => {\n      const dateA = a.availableDate ? new Date(a.availableDate).valueOf() : Infinity;\n      const dateB = b.availableDate ? new Date(b.availableDate).valueOf() : Infinity;\n      return dateA - dateB;\n    });\n  } else if (sortMethod === \"sqft\") {\n    filtered.sort((a, b) => {\n      const sqftA = parseInt((a.sqft || \"\").replace(/[^\\d]/g, \"\"), 10) || 0;\n      const sqftB = parseInt((b.sqft || \"\").replace(/[^\\d]/g, \"\"), 10) || 0;\n      return sqftA - sqftB;\n    });\n  } else {\n    // fallback => alphabetical by **floor -> wing -> unitNum -> unitCanonical**\n    filtered.sort((a, b) => {\n      // floors like \"1\",\"2\" (string) â€” compare numerically\n      const fa = parseInt(a.floor || \"0\", 10), fb = parseInt(b.floor || \"0\", 10);\n      if (fa !== fb) return fa - fb;\n\n      // wings: \"\", \"E\", \"N\" â€” keep empty (single stack) grouped, then alpha\n      const wa = a.wing || \"\", wb = b.wing || \"\";\n      if (wa !== wb) return wa.localeCompare(wb);\n\n      // numeric unit number \"109\" vs \"203\"\n      const una = parseInt(a.unitNum || \"0\", 10), unb = parseInt(b.unitNum || \"0\", 10);\n      if (una !== unb) return una - unb;\n\n      // final tie-breaker: canonical string\n      return (a.unitCanonical || \"\").localeCompare(b.unitCanonical || \"\");\n    });\n  }\n\n  /********************************************************************\n    STEP 5: Filter by v.selectedFeatures => AND logic\n  ********************************************************************/\n  if (Array.isArray(v.selectedFeatures) && v.selectedFeatures.length > 0) {\n    filtered = filtered.filter((unit) => {\n      const unitFeats = (unit.features || []).map((f) => f.handle);\n      const fpFeats = (unit.floorplan?.[0]?.features || []).map((f) => f.handle);\n      const combined = new Set([...unitFeats, ...fpFeats]);\n      // Keep the unit only if it has EVERY selected feature (AND)\n      return v.selectedFeatures.every((feat) => combined.has(feat));\n    });\n  }\n\n  /********************************************************************\n    STEP 6: Return final array => computedUnits\n  ********************************************************************/\n  return filtered;\n})();","computed":true},{"name":"filteredUnits","id":"aeadzddfX0TSUe6KQzcI","initialValue":"return "},{"initialValue":"return [];","id":"jsaDHNFy3AMHJF8bFhS9","name":"selectedFeatures"},{"initialValue":"return \"\";","name":"blueprintSVG","id":"lS0jO706kzw2Uur9rBNS"},{"id":"lwj5ZKYVoGqYGi2SfP6i","name":"floorPlanDescriptions"},{"name":"selectedPlanView","id":"pXsLCeFmGH17TMxRKNsX"},{"id":"siy8KGaNTyPJA9YMMmJg","name":"popupOpen","initialValue":"return \"\";"},{"id":"vTzjsWWVtdDBsLlbde2p","name":"floorplans"},{"name":"favoriteUnits","initialValue":"return \"\"","id":"veTtxyn3ncFxVVyDKlhl"},{"id":"wbVTHI7VgrhBjICiajAH","name":"selectedFloorPlan"},{"id":"x4uow5JNGuVQHdTEcMM0","name":"i","initialValue":"return 0;"},{"id":"z25lOuJAWFfZ9Bn8HmJR","name":"sightmapUrl"},{"id":"z7d6MckJ2gNuMXiAuVTt","name":"selectedType"}],"apps":[{"id":"hdLDqn5x5NPvHLOjD912","baseUrl":"return 'https://r-center-centroid-alpha-9898cee5.preview.craft.cloud/'\n","type":"rest","name":"Centroid"}],"actions":[],"elements":[{"events":[{"actions":[{"function":"return (function() {\n  // 1) Identify which favorite unit was clicked\n  const item = v.favoriteUnits?.[v.i];\n  if (!item) {\n    return \"No favorite unit => nothing to do.\";\n  }\n\n  // 2) Extract key info\n  const apt = item.unit || \"\";\n  const plan = item.floorplan?.[0]?.handle || \"\";\n  const type = item.floorplan?.[0]?.type?.[0]?.handle || \"\";\n\n  // 3) Build your desired URL\n  //    e.g., /units?type=A1&floorplan=A1&apartment=101\n  const newUrl = `/center?type=${type}&floorplan=${plan}&apartment=${apt}`;\n\n  // 4) Navigate to that URL\n  window.location.href = newUrl;\n\n  // 5) Return something for Wizedâ€™s Data Preview\n  return {\n    apt,\n    plan,\n    type,\n    newUrl\n  };\n})();","type":"run-function","id":"7d239f57-41e1-45f8-8763-34a275949aad"}],"id":"c719cb55-c4ab-4912-83cd-f6996843798a","type":"click"}],"id":"0kjjXht8R0J95GjOLVPf","name":"fav_Link"},{"id":"124AZYJugqZ56QDwjNrA","name":"flpnPrice","text":{"value":"// Assume \"price\" is v.filteredFloorplans[v.i].minPrice\nconst price = v.filteredFloorplans[v.i].minPrice;\n\n// If 0, show \"Waitlist Only\"\nif (price === 0) {\n  return \"No Matching Apartments\";\n}\n\n// Otherwise, format the number as a US currency string\nconst formattedPrice = price.toLocaleString(\"en-US\", {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nreturn `Starting at $${formattedPrice}`;"}},{"name":"floorMaps","id":"1BzlkvyFq230dErz5Dc5","visibility":{"value":"// Treat undefined/null as \"\", so .trim() is safe.\nconst apt = (v.selectedApt || \"\").trim();\nconst floorplans = v.selectedFloorplanIds;\n\n// Check if v.selectedApt has a value\nif (apt) {\n  return true;\n}\n\n// If floorplans is an array, check length\nif (Array.isArray(floorplans) && floorplans.length > 0) {\n  return true;\n}\n\n// If floorplans is a string, check if non-empty\nif (typeof floorplans === \"string\" && floorplans.trim() !== \"\") {\n  return true;\n}\n\n// Otherwise, no value\nreturn false;"}},{"id":"1TqSRngZSJ4upBXOyJ40","name":"unitSelector"},{"styles":{"values":[{"property":"display","value":"return v.popupOpen === \"promo\" ? \"block\" : \"none\";","id":"7a755a87-a6ae-4a27-8942-4f108a106011"}]},"name":"popupPromo","id":"3oagiS2e2uEPTxG8Tx4U"},{"name":"favoriteUnit","id":"40HLfKuVGfqmGY3ELcSc","list":{"value":"return v.favoriteUnits;","indexVariable":"x4uow5JNGuVQHdTEcMM0"}},{"id":"45TbdPVu355n9PFOYQHN","visibility":{"value":"const unit = v.favoriteUnits?.[v.i] || {};\nconst patio = unit.patioSqft || 0;\nconst balcony = unit.balconySqft || 0;\nreturn (patio > 0 || balcony > 0);"},"name":"Fav_outdoorWrapper"},{"name":"flpnSqft","id":"4Sc1TXYk28stPPVbWXXD","text":{"value":"return v.filteredFloorplans[v.i].sqft + \" sqft\";"}},{"id":"4kH1RzXazx1UP2vR3Frh","name":"Fav_apt_date","text":{"value":"return (function() {\n  let rawDate = v.favoriteUnits?.[v.i]?.availableDate;\n  // If no date is found, return empty\n  if (!rawDate) return \"\";\n\n  // If rawDate is something like \"\\\"2025-03-12T07:00:00+00:00\\\"\",\n  // remove outer quotes:\n  rawDate = rawDate.replace(/^\"|\"$/g, \"\"); \n  // Now rawDate should be: 2025-03-12T07:00:00+00:00\n\n  // Create Date object\n  const dateObj = new Date(rawDate);\n  // If itâ€™s invalid, bail\n  if (String(dateObj) === \"Invalid Date\") {\n    return \"\";\n  }\n\n  // If date/time <= now, show \"Now\"\n  if (dateObj.getTime() <= Date.now()) {\n    return \"Now\";\n  }\n\n  // Otherwise, format as e.g. \"Mar 1\", \"Mar 13\", etc., using UTC\n  const monthAbbr = dateObj.toLocaleString(\"en-US\", {\n    month: \"short\",\n    timeZone: \"UTC\"\n  }); \n  const day = dateObj.getUTCDate(); // day of month in UTC\n\n  // Return \"Mar 1\", \"Mar 13\", etc.\n  return `${monthAbbr} ${day}`;\n})();"}},{"id":"5D1FlQUlSHNtxQUFd08K","name":"sort_rent","classes":{"values":[{"class":"active","condition":"return v.sortMethod === \"rentAsc\" || v.sortMethod === \"rentDesc\";","id":"0d758a68-d916-4dcb-a2c8-4542400fb100"}]},"events":[{"id":"44fa7713-d96d-4f95-9b9a-759a7414808a","type":"click","actions":[{"value":"  // Read the current sort method\n  const current = v.sortMethod;\n\n  // We'll cycle: rentAsc -> rentDesc -> alphabetical -> rentAsc ...\n  let next;\n  if (current === \"rentAsc\") {\n    next = \"rentDesc\";\n  } else if (current === \"rentDesc\") {\n    next = \"alphabetical\";\n  } else {\n    // covers \"alphabetical\" or any other leftover state\n    next = \"rentAsc\";\n  }\n\n  // Return the new state\n  return next;","id":"383c37b5-aea2-4b2e-85a4-afce3f4771db","variable":"C6WIFV6ls6T5Ocb83hJr","type":"set-variable"}]}],"text":{"value":"const method = v.sortMethod || \"alphabetical\";\n\nif (method === \"rentAsc\") {\n  return \"\\u2191 RENT\";  // â†‘\n} else if (method === \"rentDesc\") {\n  return \"\\u2193 RENT\";  // â†“\n} else {\n  // default or \"alphabetical\"\n  // Use \\u2195 (â†•) plus Variation Selectorâ€“15 (\\uFE0E) to request text mode:\n  return \"\\u2195\\uFE0E RENT\";\n}"}},{"text":{"value":"return v.filteredUnits[v.i].sqft;"},"name":"sqft","id":"5ptDGe18aLyuovyfSDDN"},{"name":"promoIcon_discount","id":"61lmfu00ZBfVQTf7Y5fp","visibility":{"value":"return v.filteredUnits?.[v.i]?.specials?.[v.j]?.icon === \"parking\";"}},{"id":"6buSuQIFc1BE2tFdXiFt","name":"aptList_rent_max","visibility":{"value":"return (function() {\n  // 1) Get current item\n  const unit = v.computedUnits?.[v.i];\n  if (!unit) return false;\n\n  // 2) Extract the raw strings\n  const rawMin = unit.minrent || \"\";\n  const rawMax = unit.maxrent || \"\";\n\n  // 3) Strip non-digit/dot characters and parse as float\n  const minNum = parseFloat(rawMin.replace(/[^\\d.]/g, \"\"));\n  const maxNum = parseFloat(rawMax.replace(/[^\\d.]/g, \"\"));\n\n  // 4) If either parse fails or theyâ€™re equal, do NOT render\n  if (isNaN(minNum) || isNaN(maxNum) || minNum === maxNum) {\n    return false;\n  }\n\n  // 5) Otherwise, render\n  return true;\n})();"},"text":{"value":"return parseFloat(\n  v.computedUnits[v.i].maxrent\n    // Remove all but digits and dots:\n    .replace(/[^\\d.]/g, \"\"),\n).toLocaleString(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});"}},{"id":"6etlpjZJ8DD8RWpdX8JM","visibility":{"value":"return v.filteredFloorplans[v.i].handle === v.toggleFloorPlan;"},"name":"floorplanButton"},{"text":{"value":"return v.filteredUnits[v.i].specials[v.j].name;"},"name":"promoText","id":"6hVh1LTprUSgQgsaT0Mn"},{"id":"6kmam2Exzh9yG1Jraxzh","name":"sortByMediaText","text":{"value":"  return (function () {\n    // Switch on the internal state of v.computedMedia\n    switch (v.computedMedia) {\n      case \"video\":\n        return \"Video\";\n      case \"photos\":\n        return \"Photos\";\n      case \"virtual\":\n        return \"Virtual Tour\";\n      default:\n        // If it's blank or unexpected, just return it as-is\n        return v.computedMedia || \"\";\n    }\n  })();"}},{"name":"floorPlan2D","visibility":{"value":"return v.computedPlanView === \"2D\";"},"id":"7DLvC7z9JU7NPGd0ih1s"},{"classes":{"values":[{"class":"current","id":"6d4dd995-1ae9-41c3-bd85-43802ed3935a","condition":"return v.selectedType === \"1-beds\";"}]},"name":"type_1Beds","id":"7NYstaQspkOReGP5XQKF"},{"id":"7OfhHoRJ9wpwdK6rnzCD","name":"unitTypeAll","text":{"value":"return (function() {\n  // 1) Grab the current unit type (e.g. \"1-beds\")\n  const rawType = v.selectedType || \"\";\n  \n  // 2) Lightly format the type if needed (replace dashes, etc.)\n  const typeLabel = rawType.replace(\"-\", \" \");\n\n  // 3) Count how many units are in v.computedUnits\n  const count = (v.computedUnits || []).length;\n\n  // 4) Build final string: \"View All 82 Available 1-beds\"\n  return `View All ${count} Available ${typeLabel}`;\n})();"}},{"text":{"value":"return v.filteredFloorplans[v.i].name;"},"id":"87Jv3CGZHUOKg5fHMpcn","name":"flpnName"},{"id":"8WpzMpoQmvrSN39IDsC4","name":"featureFilterOpenIcon","visibility":{"value":"return v.showFloorPlanFilter === false;"}},{"id":"9IkuWOXkimLCsgrohhSJ","styles":{"values":[{"value":"return (function() {\n  return (v.popupOpen === \"sightmap\") \n    ? \"flex\" \n    : \"none\";\n})();","id":"58583b56-a96c-4f92-850f-6b7d5501667e","property":"display"}]},"name":"popupBackground"},{"name":"floorplanDropdown","id":"9Mw4axNMcBO4HYDVGSjS","classes":{"values":[{"condition":"return (function() {\n  const arr = v.filteredFloorplans || [];\n  return arr.length === 1;\n})();","class":"single","id":"dcd39ec5-f272-4a60-a02b-0aa1b2dcc4d2"}]}},{"name":"type_alcoves","classes":{"values":[{"condition":"return v.selectedType === \"alcoves\";","id":"fadccd64-14c2-4206-9d90-c22f21b127cf","class":"current"}]},"id":"9hnO9usfFSaA7KZgZ6fS"},{"name":"popupFees","id":"9oF4QOLc0G8FEmkqGNhI","styles":{"values":[{"property":"display","value":"return v.popupOpen === \"fees\" ? \"block\" : \"none\";","id":"2a6bcd47-8053-4c0a-9bc4-deccb3a6cca3"}]}},{"id":"AjMzMXYMyPf2jSdYlXts","name":"floorPlanCollections_Wrapper","visibility":{"value":"// Only render the wrapper if showCollections === true\nreturn v.showCollections;"}},{"id":"B1VhCMuAPhbTfaZAmu2R","name":"sortActivePlanCheck","visibility":{"value":"return (function() {\n  // Retrieve the current floor plan view state (defaulting to an empty string)\n  const currentView = (v.floorPlanView && v.floorPlanView.floorPlanView || \"\").toLowerCase();\n  // Retrieve the current floor plan media state (defaulting to an empty string)\n  const currentMedia = (v.floorPlanMedia && v.floorPlanMedia.floorPlanMedia || \"\").toLowerCase();\n\n  // Define which values count as \"active\" for each variable\n  // For floor plan view, we assume the valid states are \"map\", \"2d\", and \"3d\"\n  const viewActive = (currentView === \"map\" || currentView === \"2d\" || currentView === \"3d\");\n  // For floor plan media, we assume the valid states are \"virtual\", \"video\", and \"images\"\n  const mediaActive = (currentMedia === \"virtual\" || currentMedia === \"video\" || currentMedia === \"images\");\n\n  // Return true if either is active\n  return viewActive || mediaActive;\n})();"}},{"visibility":{"value":"return v.computedPlanView === \"3D\";"},"name":"floorPlan3D","id":"B3Xi0RlWELxbDPT3ZNaF"},{"id":"BEMeJSan3M90akqidTx2","name":"apt_Images","visibility":{"value":"return v.computedMedia === \"photos\";"}},{"visibility":{"value":"return (function() {\n  // Are we dealing with a selected floor plan or a selected apartment?\n  const hasSelectedFloorPlan = !!v.selectedFloorPlan;\n  const hasSelectedApt       = !!v.selectedApt;\n\n  // Safely extract 3D floor plan URLs\n  // A) from computedFloorPlan (floorplan3d)\n  const plan3dUrl = v.computedFloorPlan?.[0]?.floorplan3d?.[0]?.url || null;\n\n  // B) from filteredUnits[v.i] (floorplan3d)\n  const apt3dUrl = v.filteredUnits?.[v.i]?.floorplan?.[0]?.floorplan3d?.[0]?.url || null;\n\n  // If a floor plan is selected AND we have a 3D URL, return it\n  if (hasSelectedFloorPlan && plan3dUrl) {\n    return plan3dUrl;\n  }\n\n  // Otherwise, if an apartment is selected AND that has a 3D URL, use it\n  if (hasSelectedApt && apt3dUrl) {\n    return apt3dUrl;\n  }\n\n  // If neither is valid, return null\n  return null;\n})();"},"name":"floorPlan3D_Button","events":[{"actions":[{"id":"56e7074b-b960-4f44-98e3-1791776f541e","variable":"pXsLCeFmGH17TMxRKNsX","value":"return \"3D\";","type":"set-variable"}],"id":"bba33f9c-de63-4cc8-872d-d5f637bbb417","type":"click"}],"id":"BGPktdJxbOpDvBGZytDe","classes":{"values":[{"id":"f91650e4-cccb-4161-b4e1-08aacc6b22b4","class":"active","condition":"return v.computedPlanView === \"3D\";"},{"class":"show-checkmark","id":"440e8ed0-3bb0-43c8-ac1b-447ba7c3ba42","condition":"return v.computedPlanView === \"3D\";"}]}},{"id":"BTfTvMSWalOKiXscv1eA","name":"unitTypeRepeater","list":{"indexVariable":"x4uow5JNGuVQHdTEcMM0","value":"return r.centroid_request.data.types"}},{"id":"CDwnwyLHbNt4TYIC7XFW","name":"unit_link","visibility":{"value":"return v.computedUnits[v.i].unit !== \"WAIT\";"},"list":{"indexVariable":"x4uow5JNGuVQHdTEcMM0","value":"return v.computedUnits;"},"classes":{"values":[{"id":"5c45093a-4e7d-4fcd-a709-91fc888ee500","class":"active","condition":"const unit = v.computedUnits?.[v.i];\nconst norm = s => (s || \"\").toString().replace(/\\s+/g,\"\").toUpperCase();\nreturn norm(unit?.unit) === norm(v.selectedApt);"}]},"events":[{"id":"282c9df6-608b-41e5-b10c-496849d17e5d","type":"click","actions":[{"id":"61cd3f3d-8fdf-4121-b15c-6ba29448188b","type":"run-function","function":"return (() => {\n  const norm = s => (s || \"\").toString().replace(/\\s+/g,\"\").toUpperCase();\n\n  // current item\n  const aptItem = v.computedUnits?.[v.i];\n  if (!aptItem) return { error: \"No item at index\", i: v.i };\n\n  // keep the letter suffix; normalize for consistent matching\n  const apartmentRaw  = (aptItem.unit || \"\").toString().trim();   // e.g. \"109 E\" or \"109E\"\n  const apartmentNorm = norm(apartmentRaw);                        // \"109E\"\n\n  // set state so downstream logic wakes up immediately\n  v.selectedApt   = apartmentNorm;   // normalized, letter kept\n  v.filteredUnits = [aptItem];       // many widgets use filteredUnits[0]\n  v.doParamsUpdate = true;\n\n  // (optional) keep URL in sync if you already rely on params\n  try {\n    const params = new URLSearchParams(window.location.search);\n    const fp = aptItem.floorplan?.[0]?.handle || \"\";\n    const tp = aptItem.floorplan?.[0]?.type?.[0]?.handle || \"\";\n    if (tp) params.set(\"type\", tp.toLowerCase());\n    if (fp) params.set(\"floorplan\", fp);\n    params.set(\"apartment\", apartmentNorm);\n    window.history.pushState({}, \"\", window.location.pathname + \"?\" + params.toString());\n  } catch (_) {}\n\n  return { apartment: apartmentNorm };\n})();"},{"id":"247981b7-821f-4fd8-b265-c6b9e71fa63e","type":"navigate-to","url":"return (function() {\n  // If the domain includes \"wizedpreview\" => skip the anchor\n  if (n.currentDomain.includes(\"wizedpreview\")) {\n    // Return an empty string or a safe fallback\n    return \"\";\n  }\n  // Otherwise use \"#top\"\n  return \"#top\";\n})();"},{"id":"74821894-d27f-4fdb-92cd-a7370acb9322","type":"set-variable","variable":"BP6cE1aHj3BNyqwCWBj6","value":"return true;"}]}]},{"name":"Fav_apt_floorPlan_img2D","attributes":{"values":[{"id":"a384b185-2977-476c-801e-82bada3dc62e","key":"src","value":"return v.favoriteUnits[v.i].floorplan[0].floorplanImage[0].url;"}]},"id":"CGlQNMJBUM2QCORGUyPi"},{"name":"featureCheck","id":"ClELjjW0NIzC3SNWNN0s","visibility":{"value":"return (function() {\n  // 1) Grab the parent group\n  const group = v.featureGroups[v.i];\n  if (!group) return false;\n\n  // 2) Grab the child feature\n  const feature = group.features[v.j];\n  if (!feature) return false;\n\n  // 3) Ensure v.selectedFeatures is an array\n  if (!Array.isArray(v.selectedFeatures)) return false;\n\n  // 4) Return true if this feature's handle is selected\n  return v.selectedFeatures.includes(feature.handle);\n})();"}},{"name":"flpn_description","text":{"value":"return (function() {\n  // 1) Ensure we have a handle\n  const planHandle = v.selectedFloorPlan || \"\";\n  if (!planHandle) {\n    return \"\"; // No plan => no description\n  }\n\n  // 2) Look up the description in v.floorPlanDescriptions\n  //    (Which you built previously)\n  const desc = v.floorPlanDescriptions?.[planHandle.toLowerCase()] || \"\";\n\n  // 3) Return the description (or an empty string if missing)\n  return desc;\n})();"},"id":"D26zNEVGrgmv4e5kP5AS"},{"name":"rent_min","text":{"value":"return parseFloat(v.filteredUnits[v.i].minrent.replace(\"$\", \"\").replace(\",\", \"\")).toLocaleString(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});"},"id":"D5pe0LIwfwEQuuGMsd7b"},{"id":"DKhyIHNrkIumrZqaytPa","name":"sightmap","events":[{"actions":[{"type":"set-variable","id":"2a9ee0dc-92ff-4de8-9717-a5efb4cc6038","value":"return \"sightmap\";","variable":"siy8KGaNTyPJA9YMMmJg"},{"type":"set-variable","id":"2ae5ec0a-f5a0-4d67-b6b6-a4501cf514ef","variable":"z25lOuJAWFfZ9Bn8HmJR","value":"return (function() {\n  // Step 1: Force the iFrame to blank\n  return \"about:blank\";\n})();"},{"value":"return v.filteredUnits[0].tour;","type":"set-variable","id":"7af3fe2d-77e4-4e2d-9700-cfde3fbf13f9","variable":"z25lOuJAWFfZ9Bn8HmJR"}],"id":"f7fb7d07-d9c8-4429-a0a4-beaa6845a302","type":"click"}]},{"id":"DModcFI1ae20UJ82H8tg","list":{"indexVariable":"0EMJih42QdwTZBlAP6tf","value":"return (function() {\n  /********************************************************************\n   * 1) Grab the first (and typically only) apartment in v.filteredUnits\n   ********************************************************************/\n  const apt = v.filteredUnits?.[0];\n  if (!apt) {\n    // If there's no selected apartment, return an empty array\n    return [];\n  }\n\n  /********************************************************************\n   * 2) Clone apt so we can merge featuresImport & specials\n   ********************************************************************/\n  const cloned = JSON.parse(JSON.stringify(apt));\n\n  function slugify(str) {\n    return (str || \"\")\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/^-+|-+$/g, \"\");\n  }\n\n  // Ensure .features is an array\n  if (!Array.isArray(cloned.features)) {\n    cloned.features = [];\n  }\n\n  // A) Merge featuresImport\n  const fiArray = Array.isArray(cloned.featuresImport) ? cloned.featuresImport : [];\n  if (fiArray.length > 0) {\n    const fi = fiArray[0]; // typically just one object\n    const categories = [\"interior\", \"exterior\", \"location\", \"extras\"];\n    categories.forEach((cat) => {\n      const rawStr = fi[cat] || \"\";\n      const items = rawStr.split(\",\").map((s) => s.trim()).filter(Boolean);\n      items.forEach((name) => {\n        const handle = slugify(name);\n        if (!cloned.features.some((f) => f.handle === handle)) {\n          cloned.features.push({ name, handle });\n        }\n      });\n    });\n  }\n\n  // B) Merge specials\n  const specials = Array.isArray(cloned.specials) ? cloned.specials : [];\n  specials.forEach((s) => {\n    const name = s.name || \"\";\n    const handle = s.handle || slugify(name);\n    if (!cloned.features.some((f) => f.handle === handle)) {\n      cloned.features.push({ name, handle });\n    }\n  });\n\n  /********************************************************************\n   * 3) Combine apt-level features with floorplan-level features\n   ********************************************************************/\n  const floorplanFeats = (cloned.floorplan?.[0]?.features || []);\n  const merged = [...cloned.features, ...floorplanFeats];\n\n  /********************************************************************\n   * 4) Return the final merged array, limited to 3 items max\n   ********************************************************************/\n  return merged.slice(0, 3);\n})();"},"name":"featuresRepeater"},{"events":[{"actions":[{"id":"4ecc0223-77f8-4a13-b0bb-3f8ccf288216","value":"  // Read the current sort method\n  const current = v.sortMethod;\n\n  // We'll cycle: rentAsc -> rentDesc -> alphabetical -> rentAsc ...\n  let next;\n  if (current === \"sqftAsc\") {\n    next = \"sqftDesc\";\n  } else if (current === \"sqftDesc\") {\n    next = \"alphabetical\";\n  } else {\n    // covers \"alphabetical\" or any other leftover state\n    next = \"sqftAsc\";\n  }\n\n  // Return the new state\n  return next;","variable":"C6WIFV6ls6T5Ocb83hJr","type":"set-variable"}],"type":"click","id":"65b7b15d-3cee-4f60-aea7-3ef9ba69e0c6"}],"text":{"value":"const method = v.sortMethod || \"alphabetical\";\n\nif (method === \"sqftAsc\") {\n  return \"\\u2191 SQFT\";  // â†‘\n} else if (method === \"sqftDesc\") {\n  return \"\\u2193 SQFT\";  // â†“\n} else {\n  // default or \"alphabetical\"\n  // Use \\u2195 (â†•) plus Variation Selectorâ€“15 (\\uFE0E) to request text mode:\n  return \"\\u2195\\uFE0E SQFT\";\n}"},"classes":{"values":[{"condition":"return v.sortMethod === \"sqftAsc\" || v.sortMethod === \"sqftDesc\";","class":"active","id":"7a0cf948-7b75-4fbf-95c0-d2f72267a36d"}]},"id":"DR3zaM6f1tVV9Ozi5lrA","name":"sort_sqft"},{"id":"Drq4lR0TbcfvGAA8LLMT","name":"unit-type","classes":{"values":[{"id":"8481764a-ee36-40e4-bcc3-558e02245b65","class":"current","condition":"return n.parameter.type === v.selectedType;"}]}},{"id":"EgpRZwxVYqshphksBm8J","classes":{"values":[{"class":"active","id":"040a5925-e150-40c6-8741-fc6d219a78bc","condition":"return v.sortMethod === \"alphabetical\";"},{"id":"380fd768-7614-4d9f-bc0a-1beed6bee58b","class":"show-checkmark","condition":"return v.sortMethod === \"alphabetical\";"}]},"events":[{"actions":[{"id":"efeed36a-ab45-40bb-9bed-cafd36215045","value":"return \"alphabetical\"","type":"set-variable","variable":"C6WIFV6ls6T5Ocb83hJr"}],"id":"ac8a1a56-8592-49e9-b6db-6099fbe1ea1a","type":"click"}],"name":"sortByFloor"},{"name":"apt_Video","id":"EsPtCxdmzj9eh8NtI8u7","attributes":{"values":[{"value":"return v.filteredUnits[0].floorplan[0].floorplanVideo[0].url;","id":"83ce56e5-390e-448b-bf31-a12aafd7850a","key":"src"}]}},{"id":"EsxBSJBAn0N37JEulN8y","name":"aptList_date","text":{"value":"return (function() {\n  let rawDate = v.computedUnits?.[v.i]?.availableDate;\n  // If no date is found, return empty\n  if (!rawDate) return \"\";\n\n  // If rawDate is something like \"\\\"2025-03-12T07:00:00+00:00\\\"\",\n  // remove outer quotes:\n  rawDate = rawDate.replace(/^\"|\"$/g, \"\"); \n  // Now rawDate should be: 2025-03-12T07:00:00+00:00\n\n  // Create Date object\n  const dateObj = new Date(rawDate);\n  // If itâ€™s invalid, bail\n  if (String(dateObj) === \"Invalid Date\") {\n    return \"\";\n  }\n\n  // If date/time <= now, show \"Now\"\n  if (dateObj.getTime() <= Date.now()) {\n    return \"Now\";\n  }\n\n  // Otherwise, format as e.g. \"Mar 1\", \"Mar 13\", etc., using UTC\n  const monthAbbr = dateObj.toLocaleString(\"en-US\", {\n    month: \"short\",\n    timeZone: \"UTC\"\n  }); \n  const day = dateObj.getUTCDate(); // day of month in UTC\n\n  // Return \"Mar 1\", \"Mar 13\", etc.\n  return `${monthAbbr} ${day}`;\n})();"}},{"name":"apt_name","text":{"value":"return v.filteredUnits[v.i].unit;"},"id":"FzjLW5EVWYqiXAJd5Z3T"},{"id":"G7CfbUi68br0Y4ftHRpn","name":"apt_Virtual_iFrame","attributes":{"values":[{"id":"589b348f-27d2-4e27-9aa9-71d0502d83e6","key":"src","value":"return v.filteredUnits[0]?.floorplan?.[0]?.floorplanVirtual ?? 'NO DATA';"},{"id":"90105d97-3fa3-4974-83b2-6fa4389f28f5","key":"allowfullscreen","value":"return '';"}]}},{"name":"floorMap","id":"GOwJXJaxM4eVimbLVc8h","text":{"type":"html","value":"return v.blueprintSVG;"}},{"name":"fav_Apply","id":"GVi5MwZZ9Ex8vQsxS4t0","events":[{"id":"d3ea5ace-f814-4dea-b401-933fa6fd18cb","actions":[{"id":"ba63f30e-6d87-457e-a5d6-792b0c933442","type":"navigate-to","url":"return (function() {\n  // 1) Identify which favorite unit weâ€™re on (v.i is the Repeater index).\n  const aptItem = v.favoriteUnits?.[v.i];\n  if (!aptItem || !aptItem.applyUrl) {\n    // If no applyUrl, return \"#\" or any fallback link\n    return \"#\";\n  }\n\n  // 2) Return that specific unitâ€™s apply link\n  return aptItem.applyUrl;\n})();"}],"type":"click"}]},{"id":"H36C1cwUF9YBFGSCrcrG","name":"apt_date","text":{"value":"return (function() {\n  let rawDate = v.filteredUnits?.[v.i]?.availableDate;\n  // If no date is found, return empty\n  if (!rawDate) return \"\";\n\n  // If rawDate is something like \"\\\"2025-03-12T07:00:00+00:00\\\"\",\n  // remove outer quotes:\n  rawDate = rawDate.replace(/^\"|\"$/g, \"\"); \n  // Now rawDate should be: 2025-03-12T07:00:00+00:00\n\n  // Create Date object\n  const dateObj = new Date(rawDate);\n  // If itâ€™s invalid, bail\n  if (String(dateObj) === \"Invalid Date\") {\n    return \"\";\n  }\n\n  // If date/time <= now, show \"Now\"\n  if (dateObj.getTime() <= Date.now()) {\n    return \"Now\";\n  }\n\n  // Otherwise, format as e.g. \"Mar 1\", \"Mar 13\", etc., using UTC\n  const monthAbbr = dateObj.toLocaleString(\"en-US\", {\n    month: \"short\",\n    timeZone: \"UTC\"\n  }); \n  const day = dateObj.getUTCDate(); // day of month in UTC\n\n  // Return \"Mar 1\", \"Mar 13\", etc.\n  return `${monthAbbr} ${day}`;\n})();"}},{"events":[{"actions":[{"value":"return \"\":","variable":"wbVTHI7VgrhBjICiajAH","type":"set-variable","id":"af067427-4622-4e35-9d85-f3a4b3a0261f"},{"id":"e6dc9d22-fa27-44f9-8ae2-119f6b7d57e1","value":"return true;","variable":"BP6cE1aHj3BNyqwCWBj6","type":"set-variable"}],"id":"e39293ef-c8ba-47cb-a3ee-d318c129682d","type":"click"}],"name":"backToUnitType_Button","id":"HGrHKeCZkLnNrmy2N46E"},{"name":"featureFilterCloseIcon","id":"HT9W6tGTS8S1wTMgz0PI","visibility":{"value":"return v.showFloorPlanFilter === true;"}},{"list":{"value":"return v.featureGroups;","indexVariable":"x4uow5JNGuVQHdTEcMM0"},"events":[{"id":"52bd2c2f-ea04-4d2e-994b-f7ad6ad6b045","actions":[{"variable":"vd6WcL2XlTPcZQAehMR7","id":"498d3e25-35c7-4682-9afc-fbc7f0faff17","value":"return v.featureGroups[v.i].categoryId;","type":"set-variable"},{"value":"return [];","variable":"jsaDHNFy3AMHJF8bFhS9","type":"set-variable","id":"013e87ee-5de8-4741-b516-8e91f86bc890"}],"type":"click"}],"classes":{"values":[{"id":"b91271c9-5b11-4d1a-9064-c3c2a2ca6de4","class":"active","condition":"return v.selectedCategory === v.featureGroups[v.i].categoryId;"}]},"name":"floorPlanCollections_Button","visibility":{"value":"/****************************************************************\n * 1) Grab the current category (like { categoryId:\"bath\", features:[...] })\n ****************************************************************/\nconst cat = v.featureGroups[v.i];\nif (!cat) return false;\n\n/****************************************************************\n * 2) If categoryId=\"all\", always show it\n ****************************************************************/\nif (cat.categoryId === \"all\") {\n  return true;\n}\n\n/****************************************************************\n * 3) If category has zero features, hide\n ****************************************************************/\nif (!Array.isArray(cat.features) || cat.features.length === 0) {\n  return false;\n}\n\n/****************************************************************\n * 4) Check bed type\n ****************************************************************/\nconst bedType = v.selectedType;\nif (!bedType) {\n  // If user hasn't picked a bed type yet, choose your preference:\n  // - return true to show everything\n  // - or return false to hide them\n  return true;\n}\n\n/****************************************************************\n * 5) Filter rawUnits by bedType only (ignoring sub-features)\n ****************************************************************/\nconst units = (v.computedUnits || []).filter((u) => {\n  const fp = u.floorplan?.[0];\n  if (!fp) return false;\n  return fp.type.some((t) => t.handle.toLowerCase() === bedType.toLowerCase());\n});\n\n// Build a set of feature handles for those units\nconst bedTypeHandlesSet = new Set();\nunits.forEach((u) => {\n  (u.features || []).forEach((f) => bedTypeHandlesSet.add(f.handle));\n  (u.floorplan?.[0]?.features || []).forEach((f) => bedTypeHandlesSet.add(f.handle));\n});\n\n/****************************************************************\n * 6) If the category has any feature from bedTypeHandles => show\n ****************************************************************/\nconst catHandles = cat.features.map((f) => f.handle);\nconst hasOverlap = catHandles.some((h) => bedTypeHandlesSet.has(h));\n\nreturn hasOverlap;"},"id":"INmrmczbI2OeN4l8UUgK"},{"classes":{"values":[{"id":"140419e0-c803-4673-be87-cf7a5f8d2177","class":"active","condition":"// Return true if the current unit is in c.favorites\n// Be sure to safely parse or fallback to an empty array if c.favorites is null/empty\nconst currentUnit = v.computedUnits?.[v.i]?.unit;\nconst favorites = JSON.parse(c.favorites || \"[]\");\n\n// The Condition must return a boolean\nreturn favorites.includes(currentUnit);"}]},"name":"favHeart_Grey","id":"J0r02NoXWggmVTIHkhqB"},{"name":"sortByText","id":"JA3J07QrgYinHRauK7ZU","text":{"value":"return (function() {\n  // Fallback to \"rent\" if not set\n  const method = v.sortMethod || \"rent\";\n\n  if (method === \"rent\") {\n    return \"By Rent Price\";\n  } else if (method === \"availability\") {\n    return \"By Available Date\";\n  } else if (method === \"sqft\") {\n    return \"By Square Feet\";\n  } else if (method === \"alphabetical\") {\n    return \"By Floor\";\n  } else {\n    return \"\"; // fallback\n  }\n})();"}},{"text":{"value":"// 1) Safely parse the \"favorites\" cookie as an array\nconst favArray = JSON.parse(c.favorites || \"[]\");\n\n// 2) Compute how many units are saved\nconst count = favArray.length;\n\n// 3) Return a string showing the count and the word 'saved'\nreturn `${count} Saved`;"},"name":"saveCounterLinkText","classes":{"values":[{"id":"00d59abb-096c-4753-acb5-c2b243bdbe70","condition":"// 1) Parse the \"favorites\" cookie as an array\nconst favArray = JSON.parse(c.favorites || \"[]\");\n\n// 2) Return true if there's at least one favorite (this sets the .active class)\nreturn favArray.length > 0;","class":"active"}]},"id":"JJC2bbirZOCL5cFnnrCh"},{"id":"JU78BGJETngi8OmkKL0T","attributes":{"values":[{"value":"return v.computedFloorPlan[0].floorplanImage[0].url;","key":"src","id":"030f222a-ea4b-452b-b80a-8daebb9c58f8"}]},"name":"flpn_floorPlan_img2D"},{"id":"JZRMW7DfI1JEWgSqBjG6","name":"flpn_Images","visibility":{"value":"return v.computedMedia === \"photos\""}},{"id":"JZio5QyFL9e53GzACZtT","name":"featureRepeater","list":{"indexVariable":"0EMJih42QdwTZBlAP6tf","value":"return v.featureGroups[v.i].features;\n"},"classes":{"values":[{"id":"879abf9d-5049-4305-b38a-e7e3ff37423b","class":"active","condition":"return (function () {\n  const group = v.featureGroups[v.i];\n  if (!group) return false;\n\n  const feature = group.features[v.j];\n  if (!feature) return false;\n\n  if (!Array.isArray(v.selectedFeatures)) return false;\n\n  // Return true if this feature's handle is in v.selectedFeatures\n  return v.selectedFeatures.includes(feature.handle);\n})();"},{"id":"195be5b4-f60b-4076-b647-24c2d39e11c6","class":"inactive","condition":"return (function () {\n  /********************************************************\n   * 1) Gather the user's currently selected features\n   ********************************************************/\n  const selectedFeatures = Array.isArray(v.selectedFeatures)\n    ? v.selectedFeatures\n    : [];\n\n  // If no features are chosen yet, then no subset is eliminated â€“\n  // typically we say everything is possible => nothing is inactive.\n  // So you can bail early or just keep going. Letâ€™s keep going.\n\n  /********************************************************\n   * 2) From v.computedUnits, filter to only units that\n   *    contain ALL selected features => AND logic\n   ********************************************************/\n  const bedUnits = v.computedUnits || []; // all bed-type units\n  const narrowed = bedUnits.filter((u) => {\n    const combined = new Set();\n    (u.features || []).forEach((f) => combined.add(f.handle));\n    (u.floorplan?.[0]?.features || []).forEach((f) => combined.add(f.handle));\n\n    // Must have *all* selectedFeatures => AND\n    return selectedFeatures.every((feat) => combined.has(feat));\n  });\n\n  // Now, narrowed is the subset of units that actually match everything\n  // the user has chosen so far.\n\n  /********************************************************\n   * 3) Gather the UNION of all features in that subset\n   ********************************************************/\n  const possibleHandles = new Set();\n  narrowed.forEach((u) => {\n    (u.features || []).forEach((f) => possibleHandles.add(f.handle));\n    (u.floorplan?.[0]?.features || []).forEach((f) => possibleHandles.add(f.handle));\n  });\n\n  // If narrowed is empty, then no units match the user's chosen features,\n  // so technically *everything* else is impossible => all .inactive\n  if (narrowed.length === 0) {\n    return true; // everything is inactive\n  }\n\n  /********************************************************\n   * 4) Check if *this* feature is in that union\n   ********************************************************/\n  const group = v.featureGroups?.[v.i];\n  if (!group) return false;\n\n  const feature = group.features?.[v.j];\n  if (!feature) return false;\n\n  // Return true => .inactive if not in possibleHandles\n  return !possibleHandles.has(feature.handle);\n})();"}]},"events":[{"id":"63a3fb0c-4e10-43b9-8560-0469f7482cc2","type":"click","actions":[{"id":"f2753311-a5c5-4438-949e-d82f213881fa","type":"set-variable","variable":"jsaDHNFy3AMHJF8bFhS9","value":"// Toggling the feature handle in v.selectedFeatures\nreturn (function() {\n  // 1) Identify the clicked feature\n  const group = v.featureGroups[v.i];\n  if (!group) return v.selectedFeatures || [];\n\n  const feature = group.features[v.j];\n  if (!feature) return v.selectedFeatures || [];\n\n  // 2) Ensure v.selectedFeatures is an array\n  if (!Array.isArray(v.selectedFeatures)) {\n    v.selectedFeatures = [];\n  }\n\n  // 3) Toggle the handle\n  const handle = feature.handle;\n  const idx = v.selectedFeatures.indexOf(handle);\n  if (idx === -1) {\n    // Not selected => add it\n    v.selectedFeatures.push(handle);\n  } else {\n    // Already selected => remove it\n    v.selectedFeatures.splice(idx, 1);\n  }\n\n  // 4) Return the updated array for Wized\n  return v.selectedFeatures;\n})();"},{"id":"a1d308b6-09b0-4c6c-843b-f7bb07fa7d38","type":"run-function","function":"return (function() {\n  /*********************************************************\n   * 0) If no floorplans => clear & stop\n   *********************************************************/\n  const allPlans = v.floorplans || [];\n  if (allPlans.length === 0) {\n    v.filteredFloorplans = [];\n    return \"No floorplans => nothing to filter.\";\n  }\n\n  /*********************************************************\n   * 1) bedType (if you also filter by bed type)\n   *********************************************************/\n  const bedType = (v.selectedType || \"\").toLowerCase();\n\n  /*********************************************************\n   * 2) Gather userâ€™s selected features => AND logic\n   *********************************************************/\n  const requiredHandles = Array.isArray(v.selectedFeatures)\n    ? v.selectedFeatures\n    : [];\n\n  /*********************************************************\n   * 3) Filter floorplans by bedType\n   *********************************************************/\n  let filtered = allPlans.filter((fp) => {\n    if (!bedType) return true; \n    return fp.type.some((t) => (t.handle || \"\").toLowerCase() === bedType);\n  });\n\n  /*********************************************************\n   * 4) For each plan, see if ANY of its units has ALL\n   *    required features => *AND* across all features\n   *********************************************************/\n  const allUnits = v.rawUnits || [];\n\n  filtered = filtered.map((fp) => {\n    // Identify the plan handle\n    const planHandle = (fp.handle || \"\").toLowerCase();\n\n    // Collect units that belong to this floorplan\n    const planUnits = allUnits.filter((u) => {\n      const uFp = u.floorplan?.[0];\n      if (!uFp) return false;\n      return (uFp.handle || \"\").toLowerCase() === planHandle;\n    });\n\n    // Among these units, keep only those that have\n    // **all** selected features\n    let planUnitsWithAll = planUnits;\n    if (requiredHandles.length > 0) {\n      planUnitsWithAll = planUnits.filter((u) => {\n        const combined = new Set();\n        (u.features || []).forEach((f) => combined.add(f.handle));\n        (u.floorplan?.[0]?.features || []).forEach((f) => combined.add(f.handle));\n\n        // This line is crucial for AND logic\n        return requiredHandles.every((req) => combined.has(req));\n      });\n    }\n\n    // availableUnits = how many pass\n    const availableUnits = planUnitsWithAll.length;\n\n    // optional: minPrice\n    let minPrice = 0;\n    if (availableUnits > 0) {\n      const rents = planUnitsWithAll.map((u) => {\n        const cleaned = (u.minrent || \"\").replace(/[^0-9.]/g, \"\");\n        return parseFloat(cleaned) || 0;\n      });\n      minPrice = Math.min(...rents);\n    }\n\n    return {\n      ...fp,\n      availableUnits,\n      minPrice\n    };\n  });\n\n  // Remove floorplans that have 0 matching units\n  filtered = filtered.filter((fp) => fp.availableUnits > 0);\n\n  // Optional sort by name\n  filtered.sort((a, b) => (a.name || \"\").localeCompare(b.name || \"\", undefined, {sensitivity: \"base\"}));\n\n  /*********************************************************\n   * 5) Assign to v.filteredFloorplans\n   *********************************************************/\n  v.filteredFloorplans = filtered;\n\n  // Return info for Wizedâ€™s preview\n  return {\n    selectedFeatures: requiredHandles,\n    totalFiltered: filtered.length\n  };\n})();"},{"id":"7bf3d95c-45d7-4013-aaa9-a2c75e2f91ce","type":"set-variable","variable":"BP6cE1aHj3BNyqwCWBj6","value":"return true;"}]}]},{"id":"JnnlZzMuApIH4Mhf4pCl","name":"Fav_featuresRepeater","list":{"value":"// Merge the two arrays\nconst apt = v.favoriteUnits?.[v.i] || {};\nconst feats1 = apt.features || []; // e.g. \"v.filteredUnits[0].features\"\nconst feats2 = apt.floorplan?.[0]?.features || [];\n\nconst merged = [...feats1, ...feats2];\nreturn merged;","indexVariable":"0EMJih42QdwTZBlAP6tf"}},{"text":{"value":"return parseFloat(\n  v.computedUnits[v.i].minrent\n    // Remove all but digits and dots:\n    .replace(/[^\\d.]/g, \"\"),\n).toLocaleString(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});"},"id":"Js8Dfy5LOcMB5NlhzG5e","name":"aptList_rent_min"},{"id":"KZkhiHqznTM7i2pBHTzd","name":"floorPlanVideo","visibility":{"value":"return v.computedMedia === \"video\";"}},{"events":[{"actions":[{"id":"4b42ac5f-e8e9-4549-8cef-7f3e1ddacf5f","value":"return \"\";","variable":"siy8KGaNTyPJA9YMMmJg","type":"set-variable"}],"id":"bbd3cc03-8be3-4b2c-92b7-e3206c5e35d3","type":"click"}],"name":"popupClose","id":"LIZ8LHLcopI6K5rTsSvw"},{"id":"Li3n8PghCuChbbwheNl5","name":"collectionFeatureWrapper"},{"visibility":{"value":"return (function() {\n  /********************************************************\n   * 1) Identify the group\n   ********************************************************/\n  const group = v.featureGroups[v.i];\n  if (!group) return false; // If we have no group object, hide\n\n  // If the group has no features at all, hide\n  if (!Array.isArray(group.features) || group.features.length === 0) {\n    return false;\n  }\n\n  /********************************************************\n   * 2) Ensure we have a selected bed type\n   ********************************************************/\n  const bedType = (v.selectedType || \"\").toLowerCase();\n  if (!bedType) {\n    // If you want these groups visible even if no bed type is selected,\n    // return true here. But your code was returning false, so we keep that:\n    return true;\n  }\n\n  /********************************************************\n   * 3) Always show the group for this bed type\n   ********************************************************/\n  // We ignore any overlap check or floor-plan matching. \n  // The group simply remains visible once a user has chosen a bed type.\n  return true;\n})();"},"id":"LibR7AVsXCbDMEuKhunM","name":"featureGroupRepeater","list":{"value":"return v.featureGroups;","indexVariable":"x4uow5JNGuVQHdTEcMM0"}},{"id":"MFF66uSdGajl3383S8S7","name":"floorPlanVirtual_Button","visibility":{"value":"return (function () {\n  // 1) Grab the \"virtual\" field from the first filtered apartment\n  const aptVirtual =\n    v.filteredUnits?.[0]?.floorplan?.[0]?.floorplanVirtual || \"\";\n\n  // 2) Grab the \"virtual\" field from the first computed floor plan\n  const planVirtual = v.computedFloorPlan?.[0]?.floorplanVirtual || \"\";\n\n  // 3) Check if either value is a real URL/string (not \"NO DATA\", not empty)\n  const isAptVirtualOk = aptVirtual && aptVirtual !== \"NO DATA\";\n  const isPlanVirtualOk = planVirtual && planVirtual !== \"NO DATA\";\n\n  return isAptVirtualOk || isPlanVirtualOk;\n})();"},"classes":{"values":[{"id":"f8b95ddf-02a2-4efd-9dd2-06a2a983d198","class":"active","condition":"return v.computedMedia === \"virtual\";"},{"id":"6f892dfa-e318-47b3-891d-a2da0fdd2001","class":"show-checkmark","condition":"return v.computedMedia === \"virtual\";"}]},"events":[{"id":"65df392d-ebc9-4db5-be4b-28dca2b721c1","type":"click","actions":[{"id":"b02e4666-85fb-476d-a658-379944f3877f","type":"set-variable","variable":"6JvrYaU1dhUfleBt0Sbn","value":"return \"virtual\";"}]}]},{"id":"MQ2IcJigd9oaD8r1NIY5","events":[{"type":"click","id":"d488979f-ee0e-4db1-baaf-cf87b73bf91a","actions":[{"id":"6556a96e-a877-415a-a04c-4577d8a5750b","type":"set-variable","value":"return \"map\";","variable":"pXsLCeFmGH17TMxRKNsX"}]}],"classes":{"values":[{"condition":"return v.computedPlanView === \"Floor Map\";","id":"ca584c45-bdd3-4bde-ba51-dfcd563dd31b","class":"active"},{"condition":"return v.computedPlanView === \"Floor Map\";","class":"show-checkmark","id":"66fed41b-9099-4af9-874e-45628ddc772e"}]},"name":"floorPlanMap_Button","visibility":{"value":"return v.selectedApt;"}},{"text":{"value":"/****************************************************************\n * 1) Filter units by selected bed type\n ****************************************************************/\nconst typeLower = (v.selectedType || \"\").toLowerCase();\nconst allUnits = v.rawUnits || [];\n\n// Only keep units whose floorplan type matches the chosen bed type\nlet matchedUnits = allUnits.filter((unit) => {\n  const fp = unit.floorplan?.[0];\n  if (!fp) return false;\n  return fp.type.some((t) => (t.handle || \"\").toLowerCase() === typeLower);\n});\n\n/****************************************************************\n * 2) If the user has selected any features, apply OR logic\n *    e.g. if they choose \"Downtown View\" + \"Courtyard View\",\n *    keep units that have AT LEAST ONE of those features.\n ****************************************************************/\nconst selectedFeatures = Array.isArray(v.selectedFeatures) ? v.selectedFeatures : [];\n\nif (selectedFeatures.length > 0) {\n  matchedUnits = matchedUnits.filter((unit) => {\n    // Combine unit-level + floorplan-level features\n    const unitFeats = (unit.features || []).map((f) => f.handle);\n    const fpFeats = (unit.floorplan?.[0]?.features || []).map((f) => f.handle);\n    const combined = new Set([...unitFeats, ...fpFeats]);\n\n    // Keep the unit if it has ANY (OR) of the selected features\n    return selectedFeatures.some((feat) => combined.has(feat));\n  });\n}\n\n/****************************************************************\n * 3) If the user has selected any floor plans, narrow further\n *    e.g. if they choose S1, only units in the floor plan \"S1\" remain.\n *    If they pick multiple floor plans, it's an OR among those IDs.\n ****************************************************************/\nconst selectedFloorplans = Array.isArray(v.selectedFloorplanIds) ? v.selectedFloorplanIds : [];\n\nif (selectedFloorplans.length > 0) {\n  matchedUnits = matchedUnits.filter((unit) => {\n    const planHandle = unit.floorplan?.[0]?.handle || \"\";\n    return selectedFloorplans.includes(planHandle);\n  });\n}\n\n/****************************************************************\n * 4) Return the final count\n ****************************************************************/\nreturn matchedUnits.length;"},"name":"counterSelected","id":"MrdzCqvyD4uBpifMcQJZ"},{"id":"NlXwHHF2QY05RlwCxtg7","name":"outdoorWrapper","visibility":{"value":"const unit = v.filteredUnits?.[v.i] || {};\nconst patio = unit.patioSqft || 0;\nconst balcony = unit.balconySqft || 0;\nreturn (patio > 0 || balcony > 0);"}},{"id":"NojySU5T9WkIspNJWB4V","name":"rent_max","visibility":{"value":"return (function() {\n  // 1) Get current item\n  const unit = v.filteredUnits?.[v.i];\n  if (!unit) return false;\n\n  // 2) Extract the raw strings\n  const rawMin = unit.minrent || \"\";\n  const rawMax = unit.maxrent || \"\";\n\n  // 3) Strip non-digit/dot characters and parse as float\n  const minNum = parseFloat(rawMin.replace(/[^\\d.]/g, \"\"));\n  const maxNum = parseFloat(rawMax.replace(/[^\\d.]/g, \"\"));\n\n  // 4) If either parse fails or theyâ€™re equal, do NOT render\n  if (isNaN(minNum) || isNaN(maxNum) || minNum === maxNum) {\n    return false;\n  }\n\n  // 5) Otherwise, render\n  return true;\n})();"},"text":{"value":"return parseFloat(\n  v.filteredUnits[v.i].maxrent.replace(\"$\", \"\").replace(\",\", \"\")\n).toLocaleString(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});"}},{"text":{"value":"return v.filteredUnits[v.i].floorplan[0].beds;"},"id":"OLrvjOppm45V1Nn8UGjK","name":"beds"},{"id":"OSaITzYAlTQoyAbbUqLU","visibility":{"value":"return v.favoriteUnits?.[v.i]?.specials?.[v.j]?.icon === \"parking\";"},"name":"Fav_promoIcon_discount"},{"id":"OY18PSpFwX7TsBElPSam","classes":{"values":[{"id":"d82db888-d464-49c0-a529-bd0892b5b4ff","class":"current","condition":"return v.selectedType === \"2-beds\";"}]},"name":"type_2Beds"},{"list":{"indexVariable":"x4uow5JNGuVQHdTEcMM0","value":"return (function () {\n  // If not an array, default to empty\n  return Array.isArray(v.selectedFeatures) ? v.selectedFeatures : [];\n})();"},"events":[{"id":"5a7547ce-96e4-4cc7-b3a8-95f305ffb8be","actions":[{"variable":"jsaDHNFy3AMHJF8bFhS9","value":"return (function() {\n  // 1) Identify the feature handle for this repeater item\n  const handle = v.selectedFeatures[v.i];\n  if (!handle) {\n    return v.selectedFeatures || [];\n  }\n\n  // 2) Remove it from v.selectedFeatures\n  if (Array.isArray(v.selectedFeatures)) {\n    const idx = v.selectedFeatures.indexOf(handle);\n    if (idx >= 0) {\n      v.selectedFeatures.splice(idx, 1);\n    }\n  }\n\n  // 3) Return the updated array so Wized knows about the change\n  return v.selectedFeatures;\n})();","id":"b2e1d924-383a-4d80-9dfa-1275710cda85","type":"set-variable"},{"id":"f494e4c7-6cdc-47a2-9366-1fedd1349084","value":"return true;","type":"set-variable","variable":"BP6cE1aHj3BNyqwCWBj6"}],"type":"click"}],"id":"OmiE4IsjxSKGaxaSDGuB","name":"featureChoiceRepeater"},{"events":[{"id":"58b1e3a4-1e84-45e9-8869-c884f92038b9","type":"click","actions":[{"cookie":"zuOcDH0XHL0yp0ca57vY","value":"// 1) Identify the apt from v.favoriteUnits[v.i]\nconst aptName = v.favoriteUnits?.[v.i]?.unit;\nif (!aptName) {\n  return c.favorites || \"[]\";\n}\n\n// 2) Parse existing cookie\nlet favorites = [];\nif (c.favorites) {\n  favorites = JSON.parse(c.favorites);\n}\n\n// 3) Remove the apt if it exists\nconst idx = favorites.indexOf(aptName);\nif (idx > -1) {\n  favorites.splice(idx, 1);\n}\n\n// 4) Return the updated array\nreturn JSON.stringify(favorites);","id":"5cdd5cbf-91f9-4eb8-a9b6-0a50a9018797","type":"set-cookie"},{"id":"6a0197c7-9039-40ec-9e87-8c656086b34d","function":"  // 1) Parse favorites from c.favorites\n  let favArray = JSON.parse(c.favorites || \"[]\");\n\n  // 2) Filter v.rawUnits\n  const allUnits = v.rawUnits || [];\n  const favUnits = allUnits.filter((u) => favArray.includes(u.unit));\n\n  // 3) Set v.favoriteUnits\n  v.favoriteUnits = favUnits;\n\n  // 4) Return something\n  return {\n    totalFavs: favArray.length,\n    matchedUnits: favUnits.length\n  };","type":"run-function"}]}],"name":"fav_ToggleOff","id":"PSku17XeaSivW8QI0v0g"},{"id":"PlJ7qrJJqp61R18hOfNf","name":"unit-type-repeater","list":{"indexVariable":"x4uow5JNGuVQHdTEcMM0","value":"return r.centroid_request.data.types"}},{"id":"Q5ZwTwLUPS44EYCURise","name":"flpn_Name","text":{"value":"return v.computedFloorPlan[0].name;"}},{"id":"Q8GUHdy6nV9GMtOKJB1X","name":"outdoor","text":{"value":"const unit = v.filteredUnits?.[v.i] || {};\nconst patio = unit.patioSqft || 0;\nconst balcony = unit.balconySqft || 0;\n\nif (patio > 0) {\n  return patio + \" Sqft Patio\";\n}\nif (balcony > 0) {\n  return balcony + \" Sqft Balcony\";\n}\n// If neither is > 0\nreturn \"\";"}},{"name":"featureList","text":{"value":"return v.featureGroups[v.i].features[v.j].name;"},"id":"QFQ2R0sl3YSxfOhk9s4B"},{"id":"QSUfCsIX3vLlzqUR0YLg","text":{"value":"return v.computedPlanView;"},"name":"sortByPlanText"},{"id":"QsAD5xF9juSqlLD2WLak","name":"unitType","text":{"value":"return r.centroid_request.data.types[v.i].name;"},"classes":{"values":[{"id":"5c3e3bf7-d5cd-4e0d-9ee1-a76c2a9afc74","class":"current","condition":"return n.parameter.type === r.centroid_request.data.types[v.i].handle;"}]},"events":[{"id":"46defc19-1a13-463c-91ca-652d4cae71da","type":"click","actions":[{"id":"b817d770-1b9e-4de0-910e-d4d329405ea1","type":"navigate-to","url":"return '/center?type=' + r.centroid_request.data.types[v.i].handle;"}]}]},{"id":"RFrJgajAn8cdWNqPgPEL","name":"Fav_outdoor","text":{"value":"const unit = v.favoriteUnits?.[v.i] || {};\nconst patio = unit.patioSqft || 0;\nconst balcony = unit.balconySqft || 0;\n\nif (patio > 0) {\n  return patio + \" Sqft Patio\";\n}\nif (balcony > 0) {\n  return balcony + \" Sqft Balcony\";\n}\nreturn \"\";"}},{"id":"RHXC6ctolnZRM6DiJSFQ","text":{"value":"return v.favoriteUnits[v.i].floorplan[0].baths;"},"name":"Fav_baths"},{"visibility":{"value":"return (function() {\n  const apt = v.selectedApt;\n\n  // Show the outline if no apt is selected\n  if (!apt) return true;\n\n  // Check the cookie\n  const favorites = JSON.parse(c.favorites || \"[]\");\n\n  // Show the outline if the selected apt is NOT in favorites\n  return !favorites.includes(apt);\n})();"},"name":"favHeart_Outline","id":"RLA4o8XEGLAapt6Vs0Pb"},{"id":"SMmAj2oduSGG1GLqwV8R","name":"promoIcon_deal","visibility":{"value":"return v.filteredUnits?.[v.i]?.specials?.[v.j]?.icon === \"deal\";"}},{"visibility":{"value":"return v.selectedApt;"},"id":"SoXlpIuOyKk1xN7rDJu4","classes":{"values":[{"class":"active","id":"6b78440d-a397-4026-95df-aed38303f100","condition":"return !v.selectedApt; "}]},"name":"backToFlpn_Button","events":[{"type":"click","id":"49537bbe-3957-4a3b-8cf2-eceaccef5bcb","actions":[{"id":"5cfe53b4-cfb2-46f7-9aa1-3c74626ea8d4","function":"return (function() {\n  // If there's a selected floor plan, drop only the apartment\n  if (v.selectedFloorPlan) {\n    v.selectedApt = \"\";\n    v.doParamsUpdate = true;\n    return \"Going back to floor-plan detail.\";\n  }\n\n  // Otherwise, clear apartment and floorplan => return to unit type\n  v.selectedApt = \"\";\n  v.selectedFloorPlan = \"\";\n  v.doParamsUpdate = true;\n  return \"Going back to unit-type listing.\";\n})();","type":"run-function"}]}]},{"id":"StrKgO1wIlfVYPSdvPv5","visibility":{"value":"return v.selectedApt;"},"name":"wrapperFlpnAptDetails"},{"name":"floorPlanCollections_Text","id":"T9obqhpnVWukuwvIm0Fc","text":{"value":"// 1) Identify the category we're rendering\nconst cat = v.featureGroups[v.i];\nif (!cat) return \"\";\n\n// 2) If itâ€™s the \"all\" category, we rename it depending on whatâ€™s currently selected\nif (cat.categoryId === \"all\") {\n  // If the user has selectedCategory = \"all,\" show \"Filter\"\n  if (v.selectedCategory === \"all\") {\n    return \"All\";\n  } else {\n    // If they are on any other category (e.g. \"views\", \"kitchen\"), show \"Reset\"\n    return \"Reset\";\n  }\n} \n\n// 3) For all other categories, just return the categoryâ€™s real name\nreturn cat.categoryName;"}},{"list":{"indexVariable":"0EMJih42QdwTZBlAP6tf","value":"return v.favoriteUnits?.[v.i]?.specials || [];"},"id":"TF18jKy6t2GdKUUDN6A8","name":"Fav_promoRepeater","styles":{"values":[{"id":"413b360b-e075-4f5f-bad4-bc83c77af321","property":"background-color","value":"// In your function:\nconst icon = v.favoriteUnits?.[v.i]?.specials?.[v.j]?.icon || \"\";\n\nswitch (icon) {\n  case \"deal\":\n    return \"var(--green)\";\n  case \"parking\":\n    return \"var(--light-green)\";\n  case \"hot\":\n    return \"var(--red)\";\n  default:\n    return \"\";  // no color\n}"}]}},{"id":"TnYjUL28UwLFI5uaYTs5","name":"floorplanAll","events":[{"id":"03288746-d272-4a4a-87c2-df684f7ecc74","type":"click","actions":[{"id":"603113d0-ccf8-456b-9df4-66d94a92d302","variable":"Lkcv67FYpZUI6TF8H6Tp","type":"set-variable","value":"return (function() {\n  // 1) Grab the filtered/typed array, e.g. v.computedUnits\n  const arr = v.computedUnits || [];\n  \n  // 2) If no matching units, just return \"\"\n  if (arr.length === 0) {\n    return \"\";\n  }\n\n  // 3) Pick a random index\n  const randomIndex = Math.floor(Math.random() * arr.length);\n\n  // 4) Return that apartmentâ€™s unit name/number (e.g. \"210\")\n  return arr[randomIndex].unit || \"\";\n})();"},{"id":"d8f52854-b2f4-4f54-8db6-8fed16a91f0d","value":"return true;","type":"set-variable","variable":"BP6cE1aHj3BNyqwCWBj6"}]}]},{"events":[{"type":"click","id":"a832ae53-614d-4165-8a50-5c9bfc769ec5","actions":[{"value":"// 1) Find the current category by v.selectedCategory\nconst cat = v.featureGroups.find(g => g.categoryId === v.selectedCategory);\nif (!cat) return []; // no such category => return empty array\n\n// 2) Identify the clicked feature object in cat.features\n//    The index variable is v.i\nconst featureObj = cat.features[v.i];\nif (!featureObj || !featureObj.handle) return [];\n\n// 3) Ensure v.selectedFeatures is an array\nif (!Array.isArray(v.selectedFeatures)) {\n  v.selectedFeatures = [];\n}\n\n// 4) Toggle that feature handle\nconst handle = featureObj.handle;\nconst idx = v.selectedFeatures.indexOf(handle);\nif (idx > -1) {\n  // remove\n  v.selectedFeatures.splice(idx, 1);\n} else {\n  // add\n  v.selectedFeatures.push(handle);\n}\n\n// 5) Return the updated array so Wized stores it in v.selectedFeatures\nreturn v.selectedFeatures;","variable":"jsaDHNFy3AMHJF8bFhS9","type":"set-variable","id":"58739c98-51a8-4807-ab43-27c95fb09e2b"},{"type":"run-function","function":"// 1) Parse the current query string\nconst params = new URLSearchParams(window.location.search);\n\n// 2) If we have a selectedType, set ?type=..., else remove it\nif (v.selectedType) {\n  params.set(\"type\", v.selectedType.toLowerCase());\n} else {\n  params.delete(\"type\");\n}\n\n// 3) Remove old floorplan= lines, then re-append them (if you want to keep them in the URL)\nparams.delete(\"floorplan\");\nif (Array.isArray(v.selectedFloorplanIds)) {\n  v.selectedFloorplanIds.forEach((fpHandle) => {\n    params.append(\"floorplan\", fpHandle);\n  });\n}\n\n// 4) If we track an apartment, set ?apartment=..., else remove\nif (v.selectedApt) {\n  params.set(\"apartment\", v.selectedApt);\n} else {\n  params.delete(\"apartment\");\n}\n\n// 5) Remove old features= lines, then re-append from v.selectedFeatures\nparams.delete(\"feature\");\nif (Array.isArray(v.selectedFeatures) && v.selectedFeatures.length > 0) {\n  v.selectedFeatures.forEach((feat) => {\n    params.append(\"feature\", feat);\n  });\n}\n\n// 6) Rewrite the browser URL with no page reload\nconst newUrl = window.location.pathname + \"?\" + params.toString();\nwindow.history.pushState({}, \"\", newUrl);\n\n// 7) Return something so Wized doesnâ€™t produce null\nreturn {\n  updatedUrl: newUrl,\n  selectedType: v.selectedType,\n  selectedFloorplanIds: v.selectedFloorplanIds,\n  selectedFeatures: v.selectedFeatures,\n  selectedApt: v.selectedApt\n};","id":"e01eb984-bfa9-467b-b8ee-ed00a9c8ec62"}]}],"list":{"indexVariable":"x4uow5JNGuVQHdTEcMM0","value":"// 1. Find the matching category (e.g., \"views\", \"all\", etc.)\nconst cat = v.featureGroups.find(g => g.categoryId === v.selectedCategory);\n\n// 2. If none found, return empty\nif (!cat) return [];\n\n// 3. Return its array of features, already deduplicated\nreturn cat.features;"},"name":"collectionFeatureRepeater","classes":{"values":[{"id":"49e7d15a-cebc-44af-8fb8-f2a4919e0edb","class":"active","condition":"// 1) Find the category\nconst cat = v.featureGroups.find(g => g.categoryId === v.selectedCategory);\nif (!cat) return false; // no category => inactive\n\n// 2) Identify the feature in cat.features[v.i]\nconst featureObj = cat.features[v.i];\nif (!featureObj || !featureObj.handle) return false;\n\n// 3) Return true if v.selectedFeatures includes that handle\nreturn Array.isArray(v.selectedFeatures) && v.selectedFeatures.includes(featureObj.handle);"}]},"id":"TuNW4IIXh2qGuHuDt45C"},{"id":"U25QabSiotLQAPeiK3Mf","name":"floorplanRepeater","list":{"indexVariable":"x4uow5JNGuVQHdTEcMM0","value":"return v.filteredFloorplans;"},"classes":{"values":[{"id":"b6f15459-c254-4562-913e-f544085f65ec","class":"active","condition":"return (function() {\n  // 1) Identify this itemâ€™s floorplan object\n  const fp = v.filteredFloorplans?.[v.i];\n  if (!fp || !fp.handle) {\n    return false; // no data => not active\n  }\n\n  // 2) Return true if this itemâ€™s handle matches v.toggleFloorPlan\n  return v.toggleFloorPlan === fp.handle;\n})();"}]},"styles":{"values":[{"id":"c8558829-4ac0-4378-9011-a78995afa23c","property":"opacity","value":"return (function() {\n  const fp = v.filteredFloorplans?.[v.i];\n  if (!fp) return \"1\";\n  return fp.availableUnits === 0 ? \"0.25\" : \"1\";\n})();"},{"id":"cbf58383-2864-4ba9-ae8d-393ef71ecf29","property":"pointer-events","value":"return (function() {\n  const fp = v.filteredFloorplans?.[v.i];\n  if (!fp) return \"auto\";\n  return fp.availableUnits === 0 ? \"none\" : \"auto\";\n})();"}]}},{"id":"V8OX0LS6Ak2Pxf9n2lu9","name":"Fav_unitFeature","text":{"value":"// Re-derive the same merged array\nconst apt = v.favoriteUnits?.[v.i] || {};\nconst feats1 = apt.features || [];\nconst feats2 = apt.floorplan?.[0]?.features || [];\nconst merged = [...feats1, ...feats2];\n\n// Use the Repeater index (v.f)\nreturn merged[v.j]?.name || \"\";"}},{"id":"VZl0XOpnHElDp1VdkPcW","events":[{"actions":[{"value":"return (function() {\n  // Simply return an empty array to clear v.selectedFeatures\n  return [];\n})();","variable":"jsaDHNFy3AMHJF8bFhS9","id":"c66fdd38-e6ad-4466-9222-d697ed0c2723","type":"set-variable"},{"id":"ae30051e-39b1-49da-aedc-9f9081eb50c8","type":"run-function","function":"return (function() {\n  // 1) Parse the current URL\n  const params = new URLSearchParams(window.location.search);\n  \n  // 2) Remove all ?feature= lines\n  params.delete(\"feature\");\n  \n  // 3) Rebuild the URL\n  const newUrl = window.location.pathname + \"?\" + params.toString();\n  window.history.pushState({}, \"\", newUrl);\n\n  // 4) Return something for Wizedâ€™s preview\n  return {\n    message: \"Cleared ?feature= from URL\",\n    newUrl\n  };\n})();"},{"id":"4a3d5e49-7700-479e-ab79-18bd96ea9274","variable":"4khMHUrFe4NNsqfgwv84","value":"return \"\";","type":"set-variable"}],"id":"e7d04474-60a0-48d5-9d73-267559b5bbbc","type":"click"}],"name":"filterReset","classes":{"values":[{"id":"41fa7cd0-175b-4dbc-ae4b-ff4caf451daf","condition":"return (function() {\n  // 1) Check if v.selectedFeatures is an array with length\n  const hasFeatures = Array.isArray(v.selectedFeatures) && v.selectedFeatures.length > 0;\n  \n  // 2) Check if v.toggleFloorPlan is non-empty (a string handle)\n  const hasFloorPlan = Boolean(v.toggleFloorPlan);\n\n  // 3) Return true if either is true\n  return hasFeatures || hasFloorPlan;\n})();","class":"active"}]}},{"id":"WcQ0L22alZwe1qL7K0vV","name":"floorPlanVideo_Button","visibility":{"value":"return (function () {\n  // Gather the video URL from the first filtered apartment\n  const aptVideo = v.filteredUnits?.[0]?.floorplan?.[0]?.floorplanVideo?.[0]?.url || \"\";\n\n  // Gather the video URL from the first computed floor plan\n  const planVideo = v.computedFloorPlan?.[0]?.floorplanVideo?.[0]?.url || \"\";\n\n  // Show the button if EITHER apartment video or floor plan video is non-empty\n  return aptVideo.length > 0 || planVideo.length > 0;\n})();"},"classes":{"values":[{"id":"49a665ed-9b87-4fde-bfbd-76a64391a3e4","class":"active","condition":"return v.computedMedia === \"video\";"},{"id":"d0a97c4b-ff8c-4bdd-ab1b-29d39c98e6ba","class":"show-checkmark","condition":"return v.computedMedia === \"video\";"}]},"events":[{"id":"65800e53-c0b1-432e-a984-ce3af407826e","type":"click","actions":[{"id":"3fdf3553-b1a0-43d0-b0f4-b70acdf1cb30","type":"set-variable","variable":"6JvrYaU1dhUfleBt0Sbn","value":"return \"video\";"}]}]},{"name":"promoIcon_hotList","id":"WhT19gRL7y4o9D7kmLP4","visibility":{"value":"// Render If snippet\n\n// 1) Access the i-th unit in v.computedUnits\nconst unit = v.computedUnits?.[v.i];\nif (!unit) return false;\n\n// 2) Grab the specials array\nconst specials = unit.specials || [];\n\n// 3) Return true if ANY item in specials has icon=\"hot\"\nreturn specials.some((sp) => sp.icon === \"hot\");"}},{"text":{"value":"return v.favoriteUnits[v.i].specials[v.j].name;"},"name":"Fav_promoText","id":"WzAqs0RMQlUumV2owu6z"},{"id":"X3ugB49WFfAoK6BWVrcI","name":"floorPlanCollectionsWrapper"},{"name":"promoIcon_discountList","id":"XJiiHb6aEYfDNgYHYjCv","visibility":{"value":"// Render If snippet\n\n// 1) Access the i-th unit in v.computedUnits\nconst unit = v.computedUnits?.[v.i];\nif (!unit) return false;\n\n// 2) Grab the specials array\nconst specials = unit.specials || [];\n\n// 3) Return true if ANY item in specials has icon=\"parking\"\nreturn specials.some((sp) => sp.icon === \"parking\");"}},{"visibility":{"value":"// Hide element if there's no special\nconst special = v.filteredUnits?.[v.j]?.specials?.[0];\nreturn Boolean(special);"},"styles":{"values":[{"property":"background-color","id":"30785280-200a-46c6-a423-c5c4cd74d6ef","value":"// \"Set Style\" => key: \"backgroundColor\", value:\nconst special = v.filteredUnits?.[v.j]?.specials?.[0];\nreturn special ? special.color : \"\";"}]},"text":{"value":"// \"Set HTML\":\nconst special = v.filteredUnits?.[v.j]?.specials?.[0];\nreturn `<img src=\"${special.icon}\" alt=\"\" style=\"height:14px; margin-right:6px;\" /> ${special.name}`;","type":"html"},"name":"unitSpecial","id":"YJxbaBmp0NCuPM8g44en"},{"id":"Yamx4D1mq1CKg4JjmRA5","name":"Fav_sqft","text":{"value":"return v.favoriteUnits[v.i].sqft;"}},{"text":{"value":"return (function() {\n  if (!Array.isArray(v.selectedFeatures)) return \"\";\n\n  // We'll collect the display names here\n  const featureNames = [];\n\n  // Loop through each selected handle and find its name in v.featureGroups\n  v.selectedFeatures.forEach((handle) => {\n    (v.featureGroups || []).forEach((group) => {\n      (group.features || []).forEach((feat) => {\n        if (feat.handle === handle) {\n          featureNames.push(feat.name);\n        }\n      });\n    });\n  });\n\n  // Join them with commas (or line breaks, etc.)\n  return featureNames.join(\", \");\n})();"},"id":"Z6xzf9HTt5PG6l6G9qEG","name":"featuresRepeaterChoices"},{"name":"Fav_apt_name","text":{"value":"return v.favoriteUnits[v.i].unit;\n"},"id":"ZmKnGfCtpDz7awQ7pO0t"},{"text":{"value":"return \"Fl \" + v.floors[v.i].floorNumber;"},"id":"aDDsDWOIByZFCAvfROkH","name":"floorNumber"},{"visibility":{"value":"// Render If snippet\n\n// 1) Access the i-th unit in v.computedUnits\nconst unit = v.computedUnits?.[v.i];\nif (!unit) return false;\n\n// 2) Grab the specials array\nconst specials = unit.specials || [];\n\n// 3) Return true if ANY item in specials has icon=\"deal\"\nreturn specials.some((sp) => sp.icon === \"deal\");"},"id":"aao6JrmPfzmQgGimEQof","name":"promoIcon_dealList"},{"id":"arNrKQmyDam2GocCvbuo","name":"Fav_rent_max","visibility":{"value":"return (function() {\n  // 1) Get current item\n  const unit = v.favoriteUnits?.[v.i];\n  if (!unit) return false;\n\n  // 2) Extract the raw strings\n  const rawMin = unit.minrent || \"\";\n  const rawMax = unit.maxrent || \"\";\n\n  // 3) Strip non-digit/dot characters and parse as float\n  const minNum = parseFloat(rawMin.replace(/[^\\d.]/g, \"\"));\n  const maxNum = parseFloat(rawMax.replace(/[^\\d.]/g, \"\"));\n\n  // 4) If either parse fails or theyâ€™re equal, do NOT render\n  if (isNaN(minNum) || isNaN(maxNum) || minNum === maxNum) {\n    return false;\n  }\n\n  // 5) Otherwise, render\n  return true;\n})();"},"text":{"value":"return parseFloat(\n  v.favoriteUnits[v.i].maxrent.replace(\"$\", \"\").replace(\",\", \"\")\n).toLocaleString(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});"}},{"id":"av1bBe6roJub1cUcFDo9","name":"sightmapFrame","attributes":{"values":[{"value":"return v.sightmapUrl;\n","key":"src","id":"b424fa00-6c04-4895-a0cb-62fe18a39da2"}]}},{"id":"b2NvSGq5KOhP7cySnAzV","visibility":{"value":"return v.favoriteUnits?.[v.i]?.specials?.[v.j]?.icon === \"hot\";"},"name":"Fav_promoIcon_hot"},{"text":{"value":"return parseFloat(\n  v.favoriteUnits[v.i].minrent.replace(\"$\", \"\").replace(\",\", \"\")\n).toLocaleString(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});"},"name":"Fav_rent_min","id":"byUpCgkArFKxamIZVNm2"},{"id":"clGISTNdst8NLLeXaY2t","name":"floorPlanImages_Button","visibility":{"value":"return (function () {\n  // Gather any photos from the first filtered apartment\n  const aptPhotos = v.filteredUnits?.[0]?.floorplan?.[0]?.gallery?.[0]?.images || [];\n  \n  // Gather any photos from the first computed floor plan\n  const planPhotos = v.computedFloorPlan?.[0]?.gallery?.[0]?.images || [];\n  \n  // Show the button if EITHER apartment photos or floor plan photos exist\n  return aptPhotos.length > 0 || planPhotos.length > 0;\n})();"},"classes":{"values":[{"id":"969059a9-acd8-4dc3-8adb-512233ec23cf","class":"active","condition":"return v.computedMedia === \"photos\";"},{"id":"08a35593-e663-4b3a-9cee-0049b9a3789f","class":"show-checkmark","condition":"return v.computedMedia === \"photos\";"}]},"events":[{"id":"d23b2b7d-1476-4095-b89a-3283b97ba84e","type":"click","actions":[{"id":"9fd64f93-d424-4c05-8def-4c4344e74ea0","type":"set-variable","variable":"6JvrYaU1dhUfleBt0Sbn","value":"return \"photos\";"}]}]},{"visibility":{"value":"return !v.selectedApt && !v.selectedFloorPlan;"},"id":"dmSPCeTynlAnCEMgul0h","name":"wrapperFloorPlans"},{"events":[{"type":"click","actions":[{"id":"f4ac53a2-581a-4bea-b2b1-b690aadaa8c2","value":"return \"rent\";","type":"set-variable","variable":"C6WIFV6ls6T5Ocb83hJr"}],"id":"576f44e4-782f-489d-bf05-4b8f0c36217d"}],"classes":{"values":[{"id":"2eac7fd1-4524-4678-8a9d-d0dc4fa26120","class":"active","condition":"return v.sortMethod === \"rent\";"},{"condition":"return v.sortMethod === \"rent\";","class":"show-checkmark","id":"33b6af18-0878-4567-a2b1-6147ccbf8b65"}]},"id":"eYrz7aCPgpT0etTqrOgp","name":"sortByRent"},{"name":"aptList_name","text":{"value":"return v.computedUnits[v.i].unit;"},"id":"eurmnJxafRqQs64g1hnt"},{"name":"aptList_sqft","id":"evuhiN9jFnnJeoIR7WK4","text":{"value":"return v.computedUnits[v.i].sqft;"}},{"text":{"value":"return v.selectedType;"},"name":"floorPlanType","id":"fJZczeBWHqWjEfgjUqSF"},{"name":"sortBySqft","events":[{"type":"click","id":"b1217173-7e60-462f-93d7-056db24e45d6","actions":[{"type":"set-variable","variable":"C6WIFV6ls6T5Ocb83hJr","id":"4d3d6342-59bd-4c7c-a309-e877d9514f5f","value":"return \"sqft\";"}]}],"id":"fQLQG4h3tQ0RwjrROtMd","classes":{"values":[{"condition":"return v.sortMethod === \"sqft\";","id":"90f807bd-678e-4a20-a81c-70a8dbaed11f","class":"active"},{"condition":"return v.sortMethod === \"sqft\";","id":"9d02e489-6481-4c78-bdb4-6ba363226380","class":"show-checkmark"}]}},{"name":"saveHeart_Filled","visibility":{"value":"// 1) Parse the \"favorites\" cookie as an array\nconst favArray = JSON.parse(c.favorites || \"[]\");\n\n// 2) Only render the element if thereâ€™s at least one saved unit\nreturn favArray.length > 0;"},"id":"fR8ZlAgWmcCSAGebjrWy"},{"events":[{"id":"513e1145-5f43-4f4e-8047-b26e9d1f8c81","type":"click","actions":[{"type":"run-function","id":"2d38af22-3fa1-4784-b889-fcd55bfa5067","function":"/****************************************************************\n * 1) Reset all relevant variables\n ****************************************************************/\nv.selectedCategory = \"\";       // Or your default, e.g. \"views\"\nv.selectedFeatures = [];       // Clear all child features\nv.selectedFloorplanIds = [];   // Clear all floor plan selections\n\n/****************************************************************\n * 2) Clean up query params\n ****************************************************************/\nconst params = new URLSearchParams(window.location.search);\n\n// Remove ?feature= lines\nparams.delete(\"feature\");\n\n// Remove ?category= if your code uses that\nparams.delete(\"category\");\n\n// Remove ?floorplan= lines if your code uses that\nparams.delete(\"floorplan\");\n\n// Optionally remove ?apartment=, etc., if needed\n// params.delete(\"apartment\");\n\n/****************************************************************\n * 3) Rewrite the URL (so it no longer has these params)\n ****************************************************************/\nconst newUrl = window.location.pathname + \"?\" + params.toString();\nwindow.history.pushState({}, \"\", newUrl);\n\n/****************************************************************\n * 4) Return debug info\n ****************************************************************/\nreturn {\n  selectedCategory: v.selectedCategory,\n  selectedFeatures: v.selectedFeatures,\n  selectedFloorplanIds: v.selectedFloorplanIds,\n  newUrl\n};"}]}],"name":"floorPlanCollections_Clear","id":"fUsNxyQqqjAcPkmVyEzl"},{"name":"flpnAptCounter","id":"gH3bZ7Cg0JxGYD7j2gfz","text":{"value":"return v.filteredFloorplans[v.i].availableUnits;\n"},"classes":{"values":[{"condition":"return (function() {\n  // 1) Identify this itemâ€™s floorplan object\n  const fp = v.filteredFloorplans?.[v.i];\n  if (!fp || !fp.handle) {\n    return false; // no data => not active\n  }\n\n  // 2) Return true if this itemâ€™s handle matches v.toggleFloorPlan\n  return v.toggleFloorPlan === fp.handle;\n})();","id":"51b2888c-017d-4c40-bcbd-1a53033f36a6","class":"active"}]}},{"id":"gNiPxKOgEZpw6wpXhaMb","text":{"value":"return (function() {\n  /********************************************************************\n   * Because we are inside a Repeater for features, we need to replicate\n   * the same merge logic and return the feature name at index v.j\n   ********************************************************************/\n  const apt = v.filteredUnits?.[0];\n  if (!apt) {\n    return \"\";\n  }\n\n  // 1) Clone\n  const cloned = JSON.parse(JSON.stringify(apt));\n\n  function slugify(str) {\n    return (str || \"\")\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/^-+|-+$/g, \"\");\n  }\n\n  if (!Array.isArray(cloned.features)) {\n    cloned.features = [];\n  }\n\n  // 2) Merge featuresImport\n  const fiArray = Array.isArray(cloned.featuresImport) ? cloned.featuresImport : [];\n  if (fiArray.length > 0) {\n    const fi = fiArray[0];\n    [\"interior\", \"exterior\", \"location\", \"extras\"].forEach((cat) => {\n      const rawStr = fi[cat] || \"\";\n      const items = rawStr.split(\",\").map((s) => s.trim()).filter(Boolean);\n      items.forEach((name) => {\n        const handle = slugify(name);\n        if (!cloned.features.some((f) => f.handle === handle)) {\n          cloned.features.push({ name, handle });\n        }\n      });\n    });\n  }\n\n  // 3) Merge specials\n  const specials = Array.isArray(cloned.specials) ? cloned.specials : [];\n  specials.forEach((s) => {\n    const name = s.name || \"\";\n    const handle = s.handle || slugify(name);\n    if (!cloned.features.some((f) => f.handle === handle)) {\n      cloned.features.push({ name, handle });\n    }\n  });\n\n  // 4) Combine .features with floorplan-level features\n  const fpFeats = (cloned.floorplan?.[0]?.features || []);\n  const merged = [...cloned.features, ...fpFeats];\n\n  // 5) Return the v.j-th feature name (or empty if none)\n  return merged?.[v.j]?.name || \"\";\n})();"},"name":"unitFeature"},{"visibility":{"value":"return v.computedPlanView === \"Floor Map\";"},"id":"goy1dNHTBX5bLHtWy6ki","name":"floorPlanMap"},{"id":"gxORzISSK1K1Uw64FBC1","name":"flpn_splideImage","attributes":{"values":[{"value":"return v.computedFloorPlan[v.i].gallery[0].images[v.j].url;","id":"0c8ea39a-d808-4a93-8b56-4a02780293b4","key":"src"}]}},{"id":"h8c4agLPyvdCrJCp7GgU","name":"saveHeart_Outline","visibility":{"value":"// 1) Parse the 'favorites' cookie as an array\nconst favArray = JSON.parse(c.favorites || \"[]\");\n\n// 2) Only render the element if there are zero saved favorites\nreturn favArray.length === 0;"}},{"id":"hBgfdmBetBfJKFDC1ox9","text":{"value":"return v.filteredUnits[v.i].description;"},"name":"apt_description"},{"id":"hatrQCdLYgku1o7TXJAJ","name":"floorPlanToggle","events":[{"id":"35cf7407-fdd9-4909-9885-72a2e25c8993","type":"click","actions":[{"id":"317ecc99-86c0-43c8-b6dc-c7ad8d5419ac","type":"set-variable","variable":"4khMHUrFe4NNsqfgwv84","value":"return (function() {\n  // 1) Get the handle\n  const handle = v.filteredFloorplans?.[v.i]?.handle || \"\";\n  \n  // 2) If no valid handle, do nothing\n  if (!handle) {\n    return v.toggleFloorPlan;\n  }\n\n  // 3) Toggle:\n  //    - If v.toggleFloorPlan is already this handle => clear it (off)\n  //    - Else => set to this handle (on)\n  if (v.toggleFloorPlan === handle) {\n    return \"\";\n  } else {\n    return handle;\n  }\n})();"}]}]},{"id":"iX5uKog5AGOSjDluQgCu","name":"direction","text":{"value":"return v.filteredUnits[v.i].direction + \" Facing\";"}},{"events":[{"actions":[{"type":"navigate-to","url":"return (function() {\n  // 1) Assume your chosen array is v.filteredUnits\n  //    (or v.computedUnits or any variable that stores your final apartment object)\n  const singleUnit = v.filteredUnits?.[0];\n  if (!singleUnit || !singleUnit.applyUrl) {\n    return \"#\";\n  }\n\n  // 2) Return the apply link\n  return singleUnit.applyUrl;\n})();","id":"b7f94286-a666-4b1e-9997-7a8257ba39aa"}],"id":"09611975-7ed2-41b2-9b69-85829e7741f4","type":"click"}],"name":"applyButton","id":"iw0gheid4vmH7wJKVs7e"},{"id":"iygHlZr1XsNYM83xcRVY","name":"favHeart_Filled","visibility":{"value":"return (function() {\n  const apt = v.selectedApt;\n\n  // Hide the filled heart if there's no selected apt\n  if (!apt) return false;\n\n  // Check the cookie\n  const favorites = JSON.parse(c.favorites || \"[]\");\n\n  // Show the filled heart only if apt is in favorites\n  return favorites.includes(apt);\n})();"}},{"name":"wrapperAptDetails","visibility":{"value":"return v.selectedApt; "},"id":"kemaQqQLPwGD5AddKdvc"},{"id":"lI1y4qVoGd2CeB5WiuSY","name":"flpn_Video","attributes":{"values":[{"key":"src","value":"return v.computedFloorPlan[0].floorplanVideo[0].url;","id":"32316f87-54cd-4b22-a863-5d33f8b00473"}]}},{"name":"aptList_floorPlan_name","text":{"value":"return v.computedUnits[v.i].floorplan[0].name;"},"id":"lzTuHFjcysl4KM8NvxEq"},{"name":"featureGroup","id":"mykFJ9ZQYryaylBOxJKl","text":{"value":"return v.featureGroups[v.i].categoryName;"}},{"id":"n1lTkDbafFUVAiAm71Y8","name":"Fav_beds","text":{"value":"return v.favoriteUnits[v.i].floorplan[0].beds;"}},{"attributes":{"values":[{"value":"return v.computedFloorPlan[0].floorplan3d[0].url;","id":"7614fb37-44c4-4d13-be0f-4a93cbdf1725","key":"src"}]},"name":"flpn_floorPlan_img3D","id":"n8kH04MvAjJA0pyAiNfu"},{"list":{"value":"return v.featureGroups;","indexVariable":"0EMJih42QdwTZBlAP6tf"},"id":"ndrisJrkTJVlXk11cR2u","name":"floorPlanCollections_Wraper"},{"id":"nnWAOOgYEEk2CGHY3FMo","events":[{"type":"click","actions":[{"type":"set-variable","value":"return \"availability\";","variable":"C6WIFV6ls6T5Ocb83hJr","id":"430e0565-d6ac-47b0-9830-b9d02f1f2274"}],"id":"a51f12ea-c2d5-4f66-b9a2-d94ced3b0333"}],"name":"sortByAvailability","classes":{"values":[{"class":"active","id":"dac60d3f-e13d-415a-83de-9f16482ae0f8","condition":"return v.sortMethod === \"availability\";"},{"condition":"return v.sortMethod === \"availability\";","class":"show-checkmark","id":"d1bb023a-6dd4-465b-98e5-1e5a453229bc"}]}},{"list":{"value":"return v.computedFloorPlan[v.i].gallery[0].images || [];","indexVariable":"0EMJih42QdwTZBlAP6tf"},"id":"nykUazmfpPayuWa0BAya","name":"flpn_splideSlide"},{"id":"o3h7G2Mnj95vy7R9kvnw","name":"favHeart_UnitLink","classes":{"values":[{"id":"3e3efb33-4cd5-4e2b-bf61-726edb73a995","class":"saved","condition":"return (function() {\n  // 1) Identify the current item in the repeater\n  const unit = v.computedUnits?.[v.i];\n  if (!unit?.unit) return false;\n\n  // 2) Parse the cookie favorites (which is an array of strings)\n  const favorites = JSON.parse(c.favorites || \"[]\");\n\n  // 3) Compare the itemâ€™s ID (converted to a string) to the favorites list\n  return favorites.includes(String(unit.unit));\n})();"},{"id":"1c7b2825-2df7-48d5-99f0-5c72a3d56d84","class":"saved-active","condition":"return (function() {\n  // 1) Identify the current repeater item.\n  const unit = v.computedUnits?.[v.i];\n  if (!unit?.unit) return false;\n\n  // 2) Parse the cookie favorites (which are strings).\n  const favorites = JSON.parse(c.favorites || \"[]\");\n  \n  // Convert the current item's ID to a string.\n  const unitId = String(unit.unit);\n\n  // 3) Check if the itemâ€™s ID is in favorites.\n  if (!favorites.includes(unitId)) return false;\n\n  // 4) Also ensure this is the selected apartment.\n  // If v.selectedApt is numeric (like 221), convert it to string too.\n  if (String(v.selectedApt) !== unitId) return false;\n\n  return true; // Both conditions passed\n})();"}]}},{"id":"pZsmoObKFkE23NlbrAiq","name":"fav_Button"},{"name":"specialsRepeater","id":"ps5BHSDaksOdTa9dYj7N","list":{"value":"return v.filteredUnits[0].specials;","indexVariable":"0EMJih42QdwTZBlAP6tf"}},{"name":"favSelectedApt_Button","events":[{"type":"click","id":"76405f5c-6af4-4d09-9ea3-ac9f6c89c1e6","actions":[{"cookie":"zuOcDH0XHL0yp0ca57vY","type":"set-cookie","id":"7b1988ed-ea55-423a-95bf-716e536b5295","value":"return (function() {\n  // 1) Identify which apartment is selected\n  const apt = v.selectedApt || \"\";\n  if (!apt) {\n    return c.favorites || \"[]\"; // No apt => do nothing\n  }\n\n  // 2) Parse existing cookie\n  let favorites = [];\n  if (c.favorites) {\n    favorites = JSON.parse(c.favorites);\n  }\n\n  // 3) Toggle this apt in the array\n  const idx = favorites.indexOf(apt);\n  if (idx >= 0) {\n    favorites.splice(idx, 1);\n  } else {\n    favorites.push(apt);\n  }\n\n  // 4) Return updated array\n  return JSON.stringify(favorites);\n})();"},{"type":"run-function","function":"return (function() {\n  // 1) Re-parse updated cookie\n  const favArray = JSON.parse(c.favorites || \"[]\");\n\n  // 2) If you track all favorite units in v.favoriteUnits, refresh them\n  const allUnits = v.rawUnits || [];\n  v.favoriteUnits = allUnits.filter((u) => favArray.includes(u.unit));\n\n  // 3) Return debug info\n  return {\n    favoritesCount: favArray.length,\n    favoriteUnits: v.favoriteUnits.length\n  };\n})();","id":"84efb175-a10b-4b7e-b71c-8b5e574bf3b6"}]}],"id":"ptR7sYxvA8hHtx4Qss0n"},{"id":"r8Ordxe41EgV1giMMLIK","name":"apt_PromoRepeater","list":{"indexVariable":"0EMJih42QdwTZBlAP6tf","value":"return v.filteredUnits?.[v.i]?.specials || [];"},"styles":{"values":[{"id":"90af0513-08e3-4114-845d-bfa353ab3abb","property":"background-color","value":"// In your function:\nconst icon = v.filteredUnits?.[v.i]?.specials?.[v.j]?.icon || \"\";\n\nswitch (icon) {\n  case \"deal\":\n    return \"var(--dark)\";\n  case \"parking\":\n    return \"var(--dark)\";\n  case \"hot\":\n    return \"var(--dark)\";\n  default:\n    return \"\";  // no color\n}"}]}},{"text":{"value":"return (function() {\n  // 1) Identify the handle for this item in the Repeater\n  const selectedHandle = v.selectedFeatures[v.i];\n  if (!selectedHandle) return \"\";\n\n  // 2) Look up the corresponding feature object in v.featureGroups\n  let foundFeature;\n  (v.featureGroups || []).forEach((group) => {\n    (group.features || []).forEach((feat) => {\n      if (feat.handle === selectedHandle) {\n        foundFeature = feat;\n      }\n    });\n  });\n\n  // 3) Return the feature's name if found; otherwise just show the handle\n  return foundFeature ? foundFeature.name : selectedHandle;\n})();"},"id":"rXWGyVoVh0CjGCH9TOpc","name":"featureChoice"},{"id":"rnZa5nxa0G5Wee6NlvI9","name":"floorPlanVirtual","visibility":{"value":"return v.computedMedia === \"virtual\";"}},{"events":[{"id":"fdde9a7d-9b1d-43dd-828b-bc27e9919cfb","type":"click","actions":[{"function":"// If the variable is not already a boolean, initialize it:\nif (typeof v.showCollections !== \"boolean\") {\n  v.showCollections = false;\n}\n\n// Toggle true/false\nv.showCollections = !v.showCollections;\n\n// Return the new state so Wized shows it in the preview\nreturn { showCollections: v.showCollections };","id":"992aebef-72a2-47a1-b030-3bc6ff2df85e","type":"run-function"}]}],"classes":{"values":[{"condition":"// Apply the .active class if showCollections === true\nreturn v.showCollections;","class":"active","id":"19c31251-a68f-45ae-9692-10b51bb1c8e3"}]},"visibility":{"value":"return !v.selectedApt;"},"id":"s0Fu1WhFYFg6SUxk95XB","name":"floorPlanShowCollections"},{"visibility":{"value":"// 1) Parse the \"favorites\" cookie as an array\nconst favArray = JSON.parse(c.favorites || \"[]\");\n\n// 2) Only render the element if thereâ€™s at least one saved unit\nreturn favArray.length > 0;"},"name":"saveCounterMenu","text":{"value":"// Safely parse the 'favorites' cookie as a JSON array.\n// Fallback to an empty array if the cookie doesn't exist or is invalid.\nconst favArray = JSON.parse(c.favorites || \"[]\");\n\n// Return the number of saved units.\nreturn favArray.length;"},"id":"ssQBADjEcYMdixMq3P7e"},{"classes":{"values":[{"condition":"return v.selectedType === \"2-beds-den\";","class":"current","id":"b2325005-619b-4dc4-94dc-2f0d5b09e7a1"}]},"name":"type_2BedsDen","id":"t2KNEfvnhVHI1v8SEQ6f"},{"attributes":{"values":[{"key":"src","value":"return v.filteredUnits[v.i]?.floorplan?.[0]?.gallery?.[0]?.images?.[v.j]?.url || \"\";","id":"d9d8c6ad-3db7-4b10-bb85-d646e14d1fa6"}]},"name":"slideImage","id":"t8HnBSNkKS58it8BPXbs"},{"id":"uJORYGSTykHaaO0dJQX1","visibility":{"value":"return !v.selectedApt && v.selectedFloorPlan;"},"name":"wrapperFlpnDetails"},{"id":"vBW0D6zKCuMYmPXROzb5","classes":{"values":[{"id":"0469249b-59d1-4240-9767-7d3c97f4d5ca","condition":"return v.selectedType === \"studios\";","class":"current"}]},"name":"type_studios"},{"name":"floorplanImage","id":"vg3UBQDdzbdy5tBiqiay","attributes":{"values":[{"key":"src","id":"5e8e53c3-3f37-490e-b5fb-0ba6eb8bbc32","value":"return v.filteredFloorplans[v.i].floorplanImage[0].url;"}]}},{"id":"vjcvIbXAG5YADHyOHrnR","visibility":{"value":"return v.favoriteUnits?.[v.i]?.specials?.[v.j]?.icon === \"deal\";"},"name":"Fav_promoIcon_deal"},{"name":"splideImage","id":"wCgwhy6GY6mMs6KU5Arq","attributes":{"values":[{"id":"f736a904-8c4a-4070-a3c0-7b03253b812b","value":"return v.filteredUnits[v.i]?.floorplan?.[0]?.gallery?.[0]?.images?.[v.j]?.url || '';","key":"src"}]}},{"id":"wFuK4gRDsQeBJT8DioN9","name":"floorPlanCounter","text":{"value":"// Return the number of computed units in v.computedUnits\nconst shownUnits = v.computedUnits || [];\nreturn `Sort ${shownUnits.length} apartments`;"}},{"events":[{"actions":[{"variable":"siy8KGaNTyPJA9YMMmJg","value":"return \"fees\";","id":"7f681552-924c-4e22-88ee-2c7bc56595a8","type":"set-variable"}],"type":"click","id":"55dabe04-7cc9-4afe-ac01-9ea23348299d"}],"name":"popupButton_Fees","id":"wGWklpxff2DZR9ZTXIMy"},{"id":"wH70zJvru7dc8PsXFyot","attributes":{"values":[{"key":"src","value":"return v.filteredUnits[v.i].floorplan[0].floorplanImage[0].url;","id":"f7d1e2d7-f3b4-4a7c-b3e6-6016e4267f27"}]},"name":"apt_floorPlan_img2D"},{"text":{"value":"return v.favoriteUnits[v.i].direction + \" Facing\";"},"id":"wW9NwK791sqdgl0GBVmw","name":"Fav_direction"},{"id":"wYSZCO1Zx6sNm3vyD2pC","name":"splideSlide","list":{"indexVariable":"0EMJih42QdwTZBlAP6tf","value":"return v.filteredUnits[v.i]?.floorplan?.[0]?.gallery?.[0]?.images || []"}},{"id":"wf0x1fUP6v4D7FXKOvn2","events":[{"id":"4b6d626d-dfcc-45d9-a487-7e0c75ed09fd","type":"click","actions":[{"type":"set-variable","value":"return \"2D\";","variable":"pXsLCeFmGH17TMxRKNsX","id":"d2a0ab12-7350-4eb3-b05c-1231b4ec19a2"}]}],"classes":{"values":[{"id":"3334b2c3-c03e-4686-9b7e-e02f2fb66f06","condition":"return v.computedPlanView === \"2D\";","class":"active"},{"condition":"return v.computedPlanView=== \"2D\";","id":"ce6e6800-fb36-4dcf-bb2f-c7cdbc4d3b30","class":"show-checkmark"}]},"name":"floorPlan2D_Button"},{"name":"collectionFeature","text":{"value":"// This directly references the same array from Step 1,\n// along with the index variable `j` you set in the Repeater.\n\nconst cat = v.featureGroups.find(g => g.categoryId === v.selectedCategory);\nif (!cat) return \"\"; // safety check\n\nreturn cat.features[v.i].name;"},"id":"wgMCHE2t65nNXazUktNe"},{"name":"floorPlanFilter","visibility":{"value":"return !v.selectedApt && !v.selectedFloorPlan && v.showFloorPlanFilter === true;"},"id":"wzgRDqNTteVHdaQW5xeA"},{"id":"x6pAseFXul8NYunvphZY","attributes":{"values":[{"key":"src","id":"4e1a7732-4c9d-4303-b3ad-a1ef02f09d3b","value":"return v.computedFloorPlan[0].floorplanVirtual ?? \"NO DATA\";"},{"value":"return '';","id":"5cdba2eb-694e-4601-b213-c14bc64d6bbd","key":"allowfullscreen"}]},"name":"flpn_Virtual_iFrame"},{"visibility":{"value":"return v.filteredUnits?.[v.i]?.specials?.[v.j]?.icon === \"hot\";"},"id":"xJCfeWVuP868W1XMljHm","name":"promoIcon_hot"},{"id":"xMH2QnmLpQqAI8Cm4eb4","name":"floorPlanViewButton","visibility":{"value":"return (function() {\n  // 1) Identify this itemâ€™s floorplan object\n  const fp = v.filteredFloorplans?.[v.i];\n  if (!fp || !fp.handle) {\n    return false; // no data => not active\n  }\n\n  // 2) Return true if this itemâ€™s handle matches v.toggleFloorPlan\n  return v.toggleFloorPlan === fp.handle;\n})();"},"events":[{"id":"c30944f8-7402-429a-ae28-83ea96db1a82","type":"click","actions":[{"id":"3ff5c664-40b6-4d46-b329-c0f89ea73a75","type":"set-variable","variable":"wbVTHI7VgrhBjICiajAH","value":"return v.toggleFloorPlan;"},{"id":"3e6a1e8d-3b00-4a19-ab48-6ff88e1215a9","type":"set-variable","variable":"BP6cE1aHj3BNyqwCWBj6","value":"return true;"},{"id":"0fc0f77c-74bc-4856-8a18-45fad77c44af","type":"navigate-to","url":"return (function() {\n  // If the domain includes \"wizedpreview\" => skip the anchor\n  if (n.currentDomain.includes(\"wizedpreview\")) {\n    // Return an empty string or a safe fallback\n    return \"\";\n  }\n  // Otherwise use \"#top\"\n  return \"#top\";\n})();"}]}]},{"attributes":{"values":[{"value":"return v.filteredUnits[v.i].floorplan[0].floorplan3d[0].url;","id":"067896af-c017-480e-b9ec-75fcf39b1b88","key":"src"}]},"id":"yMD0dTTLFJx3bUBBJeIg","name":"apt_floorPlan_img3D"},{"id":"z9LCuBMw2c3IHo6ONr8v","events":[{"type":"click","actions":[{"type":"set-variable","value":"return \"promo\";","variable":"siy8KGaNTyPJA9YMMmJg","id":"b9e093f6-f298-4f90-b526-7b2fc99a8234"}],"id":"e6fe8fbf-6bd0-4eb2-b989-24b5c610b83d"}],"name":"popupButton_Promo"},{"text":{"value":"return v.filteredUnits[v.i].floorplan[0].baths;"},"id":"zFK6rq7JJk3ZNCC8Eszx","name":"baths"},{"text":{"value":"return v.filteredUnits[v.i].floorplan[0].name;"},"name":"floorPlan_Name","id":"zYDIUuzwgt7ibpFAGq4u"},{"visibility":{"value":"const fp = v.filteredFloorplans?.[v.i];\nif (!fp) return false;\n\n// We assume you store multiple toggles in v.selectedFloorplanIds\nif (!Array.isArray(v.selectedFloorplanIds)) return false;\n\n// If youâ€™re toggling by .handle\nreturn v.selectedFloorplanIds.includes(fp.handle);\n\n// (If toggling by .name, do `fp.name` instead)"},"name":"check","id":"zdgkRh8SvbygYJmvxu56"}],"events":[{"id":"27i10KC761AVxfDOs6km","name":"initializeDefaultSort","trigger":"page-complete","actions":[{"id":"4510ad66-9538-4b18-a6be-bd59e9f0f265","type":"run-function","function":"return (function() {\n  // Force a refresh by reassigning the current value:\n  v.sortMethod = v.sortMethod || \"rent\";\n  v.floorPlanView = v.floorPlanView || { floorPlanView: \"map\" };\n  v.floorPlanMedia = v.floorPlanMedia || { floorPlanMedia: \"photos\" };\n  \n  // Return current values (just for debugging)\n  return {\n    sortMethod: v.sortMethod,\n    floorPlanView: v.floorPlanView,\n    floorPlanMedia: v.floorPlanMedia\n  };\n})();"}]},{"id":"6ThOpztAyMxayO74VQKe","name":"filteredUnit","trigger":"attribute-present","attribute":"wrapperAptDetails","actions":[{"id":"d76eae7f-d1f3-47ff-a8a4-0a81ad4a180c","type":"run-function","function":"return (function() {\n  /********************************************************************\n    [Event: filteredUnit]\n    Triggered when \"wrapperAptDetails\" attribute is present.\n  ********************************************************************/\n\n  // Helper: normalize unit strings (kills spaces/case)\n  const norm = (s) => (s || \"\").toString().replace(/\\s+/g, \"\").toUpperCase();\n\n  // 1) Grab arrays\n  const allUnits = v.rawUnits || [];\n  const computed = v.computedUnits || [];\n\n  // 2) No selected apt => clear + reinit\n  if (!v.selectedApt) {\n    v.filteredUnits = [];\n    if (typeof window.reinitSplide === \"function\") {\n      setTimeout(() => window.reinitSplide(), 200);\n    }\n    return \"No apt => v.filteredUnits = [] => reinitSplide() after 200ms\";\n  }\n\n  // 3) Normalize the selected apt once (keeps letters consistent)\n  const selectedNorm = norm(v.selectedApt);\n\n  // 4) Find the matching unit (normalize both sides)\n  let aptItem =\n    allUnits.find(u => norm(u.unit) === selectedNorm) ||\n    computed.find(u => norm(u.unit) === selectedNorm); // fallback if rawUnits shape differs\n\n  // 5) Store result and (re)init Splide\n  v.filteredUnits = aptItem ? [aptItem] : [];\n\n  if (typeof window.reinitSplide === \"function\") {\n    setTimeout(() => window.reinitSplide(), 300);\n  }\n\n  // 6) Debug info for Wized preview\n  return aptItem\n    ? `Found apt=${aptItem.unit}. v.filteredUnits updated => reinit in 300ms`\n    : \"No match on normalized unit => empty => reinit in 300ms\";\n})();"}]},{"id":"7IysUVAirMHGFZzmudUX","name":"insertUnitTypeLD","trigger":"attribute-present","attribute":"wrapperFloorPlans","actions":[{"disabled":true,"id":"eec3a197-c33d-4348-b702-d3d1505693d5","type":"run-function","function":"return (() => {\n  if (!Array.isArray(v.filteredFloorplans) || v.filteredFloorplans.length === 0) {\n    return \"No floorplans => No JSON-LD inserted.\";\n  }\n\n  // e.g. \"studios\", \"1-beds\", \"2-beds-den\", etc.\n  const paramType = (v.selectedType || \"\").toLowerCase();\n\n  const complexSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"ApartmentComplex\",\n    \"name\": \"Southsider Apartments\",\n    \"url\": \"https://www.southsidermpls.com/center?type=\" + encodeURIComponent(paramType),\n    \"address\": {\n      \"@type\": \"PostalAddress\",\n      \"streetAddress\": \"3029 22nd Ave S\",\n      \"addressLocality\": \"Minneapolis\",\n      \"addressRegion\": \"MN\",\n      \"postalCode\": \"55407\",\n      \"addressCountry\": \"US\"\n    },\n    \"hasPart\": v.filteredFloorplans.map((fp) => {\n      return {\n        \"@type\": \"FloorPlan\",\n        \"name\": fp.name || \"\",\n        \"numberOfRooms\": fp.beds || 0,\n        \"layoutImage\": fp.floorplanImage?.[0]?.url || \"\",\n        \"floorSize\": {\n          \"@type\": \"QuantitativeValue\",\n          \"value\": fp.sqft || 0,\n          \"unitText\": \"sq ft\"\n        },\n        \"offers\": {\n          \"@type\": \"Offer\",\n          \"price\": fp.minPrice || 0,\n          \"priceCurrency\": \"USD\",\n          \"availability\":\n            fp.availableUnits > 0\n              ? \"https://schema.org/InStock\"\n              : \"https://schema.org/OutOfStock\"\n        }\n      };\n    })\n  };\n\n  const ldString = JSON.stringify(complexSchema);\n\n  document.head.insertAdjacentHTML(\n    \"beforeend\",\n    `<script id=\"floorPlanJsonLd\" type=\"application/ld+json\">${ldString}</script>`\n  );\n\n  return `Bed-Type JSON-LD inserted for ${v.filteredFloorplans.length} plan(s).`;\n})();"}]},{"request":"JJ3zdtN6YvYYEZ3jhxhQ","trigger":"after-request","name":"filterUnits","id":"9lyVO4ASqLm9Dd7v7jho","actions":[{"function":"return (function() {\n  /********************************************************************\n    [Event: filterUnits]\n    Creates v.filteredUnits = array of actual units that match:\n      - bed type (v.selectedType)\n      - floor plan(s) (v.selectedFloorPlan)\n      - selected features (v.selectedFeatures)\n    EXACTLY the same logic as filterFloorplans, but yields units not plans.\n  ********************************************************************/\n\n  // 1) Clone v.rawUnits & unify featuresImport + specials\n  const localCloned = JSON.parse(JSON.stringify(v.rawUnits || []));\n\n  function slugify(str) {\n    return (str || \"\")\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/^-+|-+$/g, \"\");\n  }\n\n  // Merge logic from your code:\n  localCloned.forEach((unit) => {\n    if (!Array.isArray(unit.features)) {\n      unit.features = [];\n    }\n    // Merge featuresImport\n    const fiArray = Array.isArray(unit.featuresImport) ? unit.featuresImport : [];\n    if (fiArray.length > 0) {\n      const fi = fiArray[0];\n      [\"interior\",\"exterior\",\"location\",\"extras\"].forEach((cat) => {\n        const rawStr = fi[cat] || \"\";\n        const items = rawStr.split(\",\").map((s) => s.trim()).filter(Boolean);\n        items.forEach((name) => {\n          const handle = slugify(name);\n          if (!unit.features.some((f) => f.handle === handle)) {\n            unit.features.push({ name, handle });\n          }\n        });\n      });\n    }\n    // Merge specials\n    const specials = Array.isArray(unit.specials) ? unit.specials : [];\n    specials.forEach((s) => {\n      const name = s.name || \"\";\n      const handle = s.handle || slugify(name);\n      if (!unit.features.some((f) => f.handle === handle)) {\n        unit.features.push({ name, handle });\n      }\n    });\n  });\n\n  // 2) bed type\n  const bedType = (v.selectedType || \"\").toLowerCase();\n\n  // 3) selected features (AND logic or OR logic â€“ match your filterFloorplans)\n  //    Here we do AND to match your scenario of combos narrowing results\n  const selectedFeatures = Array.isArray(v.selectedFeatures)\n    ? v.selectedFeatures\n    : [];\n\n  // 4) optional floor plan selection (like [\"s3\",\"a2\"])\n  const selectedPlans = Array.isArray(v.selectedFloorPlan)\n    ? v.selectedFloorPlan.map((p) => p.toLowerCase())\n    : [];\n\n  // 5) Filter localCloned for bedType + floorplan + features\n  let filteredUnits = localCloned.filter((u) => {\n    // (A) bed type check\n    const fp = u.floorplan?.[0];\n    if (!fp) return false;\n    // must match the bed type (if any)\n    if (bedType) {\n      const matchesType = fp.type.some((t) => (t.handle || \"\").toLowerCase() === bedType);\n      if (!matchesType) return false;\n    }\n    // (B) floor plan check\n    if (selectedPlans.length > 0) {\n      const planHandle = (fp.handle || \"\").toLowerCase();\n      if (!selectedPlans.includes(planHandle)) {\n        return false;\n      }\n    }\n    // (C) features check => AND logic\n    if (selectedFeatures.length > 0) {\n      const combined = new Set();\n      (u.features || []).forEach((f) => combined.add(f.handle));\n      (fp.features || []).forEach((f) => combined.add(f.handle));\n      // Must have ALL selectedFeatures\n      const hasAll = selectedFeatures.every((feat) => combined.has(feat));\n      if (!hasAll) return false;\n    }\n    return true;\n  });\n\n  // 6) Sort them if you like â€“ e.g. by minrent\n  filteredUnits.sort((a, b) => {\n    const rentA = parseFloat((a.minrent || \"\").replace(/[^0-9.]/g, \"\")) || 0;\n    const rentB = parseFloat((b.minrent || \"\").replace(/[^0-9.]/g, \"\")) || 0;\n    return rentA - rentB;\n  });\n\n  // 7) Store as v.filteredUnits\n  v.filteredUnits = filteredUnits;\n\n  // 8) Return debug\n  return {\n    total: filteredUnits.length,\n    bedType,\n    selectedFeatures,\n    selectedPlans,\n    debugUnits: filteredUnits.map((u) => ({\n      unit: u.unit,\n      floorplan: u.floorplan?.[0]?.handle,\n      minrent: u.minrent,\n      feats: (u.features || []).map((f) => f.handle)\n    }))\n  };\n})();","id":"fa3d4dc1-5c3e-4c91-8ebd-42e005a933e4","type":"run-function"}]},{"id":"JYEqPCdk5zIzvjELAke9","name":"getUnits","trigger":"page-loading","actions":[{"id":"dc35c4a1-89bc-40cf-8e31-c42591e16575","type":"perform-request","request":"JJ3zdtN6YvYYEZ3jhxhQ"}]},{"id":"KCGqJelstIdgNIemJnMi","name":"insertApartmentLD","trigger":"attribute-present","attribute":"wrapperAptDetails","actions":[{"id":"8af386e0-fa81-4ecd-ae5b-984c784f6642","type":"run-function","function":"return (() => {\n  const apt = v.filteredUnits?.[0];\n  if (!apt) {\n    return \"No apartment => no JSON-LD.\";\n  }\n\n  const aptNumber = apt.unit || \"\";\n  // We assume you store one floorplan object in apt.floorplan[0]\n  const fp = apt.floorplan?.[0] || {};\n  const planName = fp.name || \"\";\n  const planHandle = fp.handle || \"\";\n\n  // Example numeric conversions\n  const bedCount = fp.beds || 0;\n  const sqft = apt.sqft || 0;\n  const rentValue = parseFloat((apt.minrent || \"\").replace(/[^0-9.]/g, \"\")) || 0;\n\n  const apartmentSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Apartment\",\n    \"name\": `Southsider - ${planName} - Apt ${aptNumber}`,\n    \"description\": apt.description || \"\",\n    \"numberOfRooms\": bedCount,\n    \"floorSize\": {\n      \"@type\": \"QuantitativeValue\",\n      \"value\": sqft,\n      \"unitText\": \"sq ft\"\n    },\n    \"isPartOf\": {\n      \"@type\": \"ApartmentComplex\",\n      \"name\": \"Southsider Apartments\",\n      \"url\": \"https://www.southsidermpls.com/\",\n      \"address\": {\n      \"@type\": \"PostalAddress\",\n      \"streetAddress\": \"3029 22nd Ave S\",\n      \"addressLocality\": \"Minneapolis\",\n      \"addressRegion\": \"MN\",\n      \"postalCode\": \"55407\",\n      \"addressCountry\": \"US\"\n      }\n    },\n    \"floorPlan\": {\n      \"@type\": \"FloorPlan\",\n      \"name\": planName\n    },\n    \"offers\": {\n      \"@type\": \"Offer\",\n      \"price\": rentValue,\n      \"priceCurrency\": \"USD\",\n      \"availability\":\n        apt.available === true\n          ? \"https://schema.org/InStock\"\n          : \"https://schema.org/OutOfStock\"\n    }\n  };\n\n  const ldString = JSON.stringify(apartmentSchema);\n\n  document.head.insertAdjacentHTML(\n    \"beforeend\",\n    `<script id=\"apartmentJsonLd\" type=\"application/ld+json\">${ldString}</script>`\n  );\n\n  return `Apartment JSON-LD inserted for Apt ${aptNumber}.`;\n})();"}]},{"id":"LoiMwZH5NE3PEon3PzoP","name":"insertFloorPlanLD","trigger":"attribute-present","attribute":"wrapperFlpnDetails","actions":[{"disabled":true,"id":"f2e9205f-9e68-433f-867e-7a998f3e54c4","type":"run-function","function":"return (() => {\n  const fp = v.computedFloorPlan?.[0];\n  if (!fp) {\n    return \"No single floor plan => no JSON-LD.\";\n  }\n\n  // Build an ApartmentComplex referencing only this floor plan\n  const paramType = (v.selectedType || \"\").toLowerCase();\n  const planHandle = fp.handle || \"\";\n\n  const complexSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"ApartmentComplex\",\n    \"name\": \"Southsider Apartments\",\n    \"url\":\n      \"https://www.southsidermpls.com/center?type=\" +\n      encodeURIComponent(paramType) +\n      \"&floorplan=\" +\n      encodeURIComponent(planHandle),\n    \"address\": {\n      \"@type\": \"PostalAddress\",\n      \"streetAddress\": \"3029 22nd Ave S\",\n      \"addressLocality\": \"Minneapolis\",\n      \"addressRegion\": \"MN\",\n      \"postalCode\": \"55407\",\n      \"addressCountry\": \"US\"\n    },\n    \"hasPart\": [\n      {\n        \"@type\": \"FloorPlan\",\n        \"name\": fp.name || \"\",\n        \"numberOfRooms\": fp.beds || 0,\n        \"layoutImage\": fp.floorplanImage?.[0]?.url || \"\",\n        \"floorSize\": {\n          \"@type\": \"QuantitativeValue\",\n          \"value\": fp.sqft || 0,\n          \"unitText\": \"sq ft\"\n        },\n        \"offers\": {\n          \"@type\": \"Offer\",\n          \"price\": fp.minPrice || 0,\n          \"priceCurrency\": \"USD\",\n          \"availability\":\n            fp.availableUnits > 0\n              ? \"https://schema.org/InStock\"\n              : \"https://schema.org/OutOfStock\"\n        }\n      }\n    ]\n  };\n\n  const ldString = JSON.stringify(complexSchema);\n\n  document.head.insertAdjacentHTML(\n    \"beforeend\",\n    `<script id=\"singleFloorPlanLd\" type=\"application/ld+json\">${ldString}</script>`\n  );\n\n  return `Single floor plan JSON-LD inserted for plan: ${planHandle}.`;\n})();"}]},{"id":"Q4N7ydJoz8gJzZZbzSAR","name":"loadSelectedMedia","trigger":"condition","condition":"return (function () {\n  // Fire this event whenever there's a selected apt or plan.\n  // If both are empty, it won't fire.\n  return Boolean(v.selectedApt || v.selectedFloorPlan);\n})();","actions":[{"id":"62a6b5f6-d11f-4835-afc2-9301fe78cee6","type":"run-function","function":"return (function () {\n  /**\n   * This function sets v.selectedMedia to your chosen default\n   * based on whether there's a selected apt or plan.\n   * The user can call this manually (e.g., on some \"Load\" or \"Initialize\" event).\n   */\n\n  const hasApt = Boolean(v.selectedApt);\n  const hasPlan = Boolean(v.selectedFloorPlan);\n\n  // A) If there's a selected apartment => default to photos -> video -> virtual\n  if (hasApt) {\n    const aptObj =\n      v.filteredUnits?.[0] ||\n      (v.computedUnits || []).find(u => u.unit === v.selectedApt);\n    if (!aptObj) {\n      v.selectedMedia = \"\";\n      return \"No apartment object found => v.selectedMedia = ''\";\n    }\n\n    const aptPhotos  = aptObj.floorplan?.[0]?.gallery?.[0]?.images || [];\n    const aptVideo   = aptObj.floorplan?.[0]?.floorplanVideo?.[0]?.url || \"\";\n    const aptVirtual = aptObj.floorplan?.[0]?.floorplanVirtual || \"\";\n\n    if (aptPhotos.length > 0) {\n      v.selectedMedia = \"photos\";\n      return \"Loaded media=photos for apt\";\n    } else if (aptVideo) {\n      v.selectedMedia = \"video\";\n      return \"Loaded media=video for apt\";\n    } else if (aptVirtual) {\n      v.selectedMedia = \"virtual\";\n      return \"Loaded media=virtual for apt\";\n    } else {\n      v.selectedMedia = \"\";\n      return \"No media found => empty\";\n    }\n  }\n\n  // B) If there's no apartment => maybe a selected floor plan => default to virtual -> photos -> video\n  if (hasPlan) {\n    const planObj = v.computedFloorPlan?.[0];\n    if (!planObj) {\n      v.selectedMedia = \"\";\n      return \"No floor plan object => empty media\";\n    }\n\n    const planVirtual = planObj.floorplanVirtual || \"\";\n    const planPhotos  = planObj.gallery?.[0]?.images || [];\n    const planVideo   = planObj.floorplanVideo?.[0]?.url || \"\";\n\n    if (planVirtual) {\n      v.selectedMedia = \"virtual\";\n      return \"Loaded media=virtual for plan\";\n    } else if (planPhotos.length > 0) {\n      v.selectedMedia = \"photos\";\n      return \"Loaded media=photos for plan\";\n    } else if (planVideo) {\n      v.selectedMedia = \"video\";\n      return \"Loaded media=video for plan\";\n    } else {\n      v.selectedMedia = \"\";\n      return \"No plan media => empty\";\n    }\n  }\n\n  // C) If neither apt nor plan => set empty\n  v.selectedMedia = \"\";\n  return \"No apt/plan => v.selectedMedia=''\";\n})();"}]},{"id":"YjChlIU1KKlXkeOncjsM","name":"updatePageTitle","trigger":"condition","condition":"return Boolean(v.doParamsUpdate);","actions":[{"id":"dddf7c2f-6578-4744-b066-e12e7c549bea","type":"run-function","function":"return (() => {\n  /*******************************************************************\n   * 0) If we've already done a fallback, skip\n   *******************************************************************/\n  if (v.didOneRedirect) {\n    return \"Already redirected once => skip.\";\n  }\n\n  /*******************************************************************\n   * 1) Gather the userâ€™s selected apt & type\n   *******************************************************************/\n  const apt = (v.selectedApt || \"\").trim();\n  const bedType = (v.selectedType || \"\").toLowerCase() || \"studios\";\n\n  if (!apt) {\n    return \"No apt => no fallback needed.\";\n  }\n\n  /*******************************************************************\n   * 2) Check if apt is actually available\n   *******************************************************************/\n  const allUnits = v.computedUnits || [];\n  const foundApt = allUnits.find(u => {\n    return (\n      (u.unit || \"\").trim() === apt &&\n      (u.status === \"1\" || u.status === \"available\")\n    );\n  });\n\n  if (foundApt) {\n    return `Apt ${apt} is available => no fallback.`;\n  }\n\n  /*******************************************************************\n   * 3) Apt is unavailable => fallback to ?type=XXX\n   *    We ensure no leftover floorplan param is in the new URL.\n   *******************************************************************/\n  // Clear the user's floorplan selection in memory\n  v.selectedFloorplanIds = [];\n  // Also clear the apartment so we don't cause repeated checks\n  v.selectedApt = \"\";\n\n  const fallbackUrl = `/center?type=${bedType}`;\n\n  /*******************************************************************\n   * 4) If we're already on that path => skip\n   *******************************************************************/\n  const currentPath = window.location.pathname + window.location.search;\n  if (currentPath === fallbackUrl) {\n    return \"Already on fallback => skip.\";\n  }\n\n  /*******************************************************************\n   * 5) Mark we did a redirect & do client-side â€œreplaceStateâ€\n   *******************************************************************/\n  v.didOneRedirect = true;\n  window.history.replaceState({}, \"\", fallbackUrl);\n\n  return `Apt ${apt} not available => replaced URL with ${fallbackUrl} & cleared floorplans.`;\n})();"}]},{"actions":[{"type":"run-function","id":"b3cba800-9e3a-4cfa-8658-12b195ea59d7","function":"return (function() {\n  // If an apartment is selected => default plan view = \"map\"\n  if (v.selectedApt) {\n    v.selectedPlanView = \"map\";\n    return \"Apt => setting selectedPlanView to 'map'.\";\n  }\n\n  // If a floor plan is selected => default plan view = \"2D\"\nif (v.selectedFloorPlan) {\n  v.selectedPlanView = \"2D\";\n  return \"FloorPlan => setting selectedPlanView to '2D'.\";\n}\n\n  // Neither => do nothing\n  return \"No apt or floor plan => leaving selectedPlanView unchanged.\";\n})();"}],"name":"loadSelectedPlan","condition":"return (function() {\n  // (A) Check for apartment\n  const hasApt = Boolean(v.selectedApt);\n\n  // (B) Check for floor plan (non-empty string)\n  const hasPlan = Boolean(v.selectedFloorPlan);\n\n  // Return true if EITHER is present\n  return hasApt || hasPlan;\n})();","trigger":"condition","id":"bVymEYLznkZOJsiKhJGD"},{"id":"d7grhP6DbYNCbBKqltqI","trigger":"after-request","name":"loadFloorplans","request":"JJ3zdtN6YvYYEZ3jhxhQ","actions":[{"type":"set-variable","variable":"vTzjsWWVtdDBsLlbde2p","id":"6bc5816c-32ab-4570-96a6-c3174832d67a","value":"v.floorplans = r.centroid_request.data.floorplans || [];\nreturn v.floorplans; // This will display the actual array in Wizedâ€™s preview"}]},{"id":"gCUE8HOIHPQCmwJBdBoH","name":"initializeUnits","trigger":"after-request","request":"JJ3zdtN6YvYYEZ3jhxhQ","actions":[{"id":"a579229c-ad77-4f32-bb9f-1d118cfe0e8e","type":"run-function","function":"return (function() {\n  /********************************************************************\n    [Function: initializeUnits]\n    Triggered when \"centroid_request\" is done\n  ********************************************************************/\n\n  // 0) Gather data from API\n  const allUnits = r.centroid_request?.data?.units || [];\n  const allPlans = r.centroid_request?.data?.floorplans || [];\n\n  // Store raw units for later usage\n  v.rawUnits = allUnits;\n\n  // 1) Parse URL query\n  const params = new URLSearchParams(window.location.search);\n  v.selectedType = (params.get(\"type\") || \"\").toLowerCase(); // e.g. \"1-beds\"\n  v.selectedApt = params.get(\"apartment\") || \"\";            // e.g. \"210\"\n  v.selectedFeatures = params.getAll(\"feature\") || [];      // e.g. [\"courtyard-view\"]\n\n  // 2) Floorplan param: if none found, store \"\" so `!v.selectedFloorPlan` is true\n  const planHandles = params.getAll(\"floorplan\");\n  if (planHandles.length > 0) {\n    // If multiple were passed, just store the first\n    v.selectedFloorPlan = planHandles[0];\n  } else {\n    v.selectedFloorPlan = \"\";\n  }\n\n  // 3) Filter the floorplans array by bed type & floorplan param\n  let filtered = allPlans.filter((fp) => {\n    // (A) If user specified a bed type, filter\n    if (v.selectedType) {\n      // Some floorplans store `type` as an array of objects w/ â€œhandleâ€\n      if (Array.isArray(fp.type)) {\n        const matchesType = fp.type.some((t) => {\n          const handle = typeof t === \"string\" ? t : t.handle;\n          return (handle || \"\").toLowerCase() === v.selectedType;\n        });\n        if (!matchesType) return false;\n      } else {\n        // If `fp.type` is a single string\n        if ((fp.type || \"\").toLowerCase() !== v.selectedType) {\n          return false;\n        }\n      }\n    }\n\n    // (B) If user specified a single floorplan handle => must match\n    if (v.selectedFloorPlan) {\n      const planHandle = (fp.handle || \"\").toLowerCase();\n      const chosen = v.selectedFloorPlan.toLowerCase();\n      if (planHandle !== chosen) {\n        return false;\n      }\n    }\n\n    // If we pass all checks => keep this plan\n    return true;\n  });\n\n  /********************************************************************\n   * 4) For each plan, figure out how many units match the selected\n   *    features => only keep the plan if it has > 0 matching units\n   ********************************************************************/\n  // A small helper to check if a unit has ALL selected features\n  function unitHasAllFeatures(unit, featList) {\n    if (!featList || featList.length === 0) return true; // no features => skip\n    const combined = new Set();\n    (unit.features || []).forEach((f) => combined.add(f.handle));\n    (unit.floorplan?.[0]?.features || []).forEach((f) => combined.add(f.handle));\n    // Must have EVERY selected feature (AND logic)\n    return featList.every((feat) => combined.has(feat));\n  }\n\n  // Merge bed type, features, etc. into each unit if needed...\n  // omitted for brevity â€“ do it as you currently do.\n\n  // Now map each floorplan to { availableUnits, minPrice }, removing those with zero\n  filtered = filtered.map((fp) => {\n    const planHandleLower = (fp.handle || \"\").toLowerCase();\n    // Find units that belong to this plan\n    const planUnits = allUnits.filter((u) => {\n      const uFp = u.floorplan?.[0];\n      return uFp && (uFp.handle || \"\").toLowerCase() === planHandleLower;\n    });\n\n    // Among those units, keep only the ones that have ALL selected features\n    const feats = Array.isArray(v.selectedFeatures) ? v.selectedFeatures : [];\n    const matchingUnits = planUnits.filter((u) => unitHasAllFeatures(u, feats));\n\n    const availableUnits = matchingUnits.length;\n    let minPrice = 0;\n    if (availableUnits > 0) {\n      const rents = matchingUnits.map((u) => {\n        const cleaned = (u.minrent || \"\").replace(/[^0-9.]/g, \"\");\n        return parseFloat(cleaned) || 0;\n      });\n      minPrice = Math.min(...rents);\n    }\n\n    return {\n      ...fp,\n      availableUnits,\n      minPrice\n    };\n  });\n\n  // Only keep floorplans with at least 1 matching unit\n  filtered = filtered.filter((fp) => fp.availableUnits > 0);\n\n  // Optionally sort them\nfiltered.sort((a, b) => {\n  const [aPrefix, aNum] = (a.name || \"\").match(/([A-Za-z]+)(\\d+)/)?.slice(1) || [\"\", \"0\"];\n  const [bPrefix, bNum] = (b.name || \"\").match(/([A-Za-z]+)(\\d+)/)?.slice(1) || [\"\", \"0\"];\n  const prefixCompare = aPrefix.localeCompare(bPrefix, undefined, { sensitivity: \"base\" });\n  return prefixCompare !== 0 ? prefixCompare : Number(aNum) - Number(bNum);\n});\n  // 5) Store in v.filteredFloorplans\n  v.filteredFloorplans = filtered;\n\n  /********************************************************************\n   * 6) OPTIONAL: build floors array\n   ********************************************************************/\n  const floorsObj = {};\n  allUnits.forEach((u) => {\n    if (!u.unit || u.unit.toUpperCase() === \"WAIT\") return;\n    const fl = u.unit.slice(0, 1);\n    if (!floorsObj[fl]) floorsObj[fl] = [];\n    floorsObj[fl].push(u.unit);\n  });\n\n  const floorsArray = Object.entries(floorsObj)\n    .map(([floor, units]) => ({\n      floorNumber: floor,\n      totalUnits: units.length,\n      firstUnit: units[0],\n    }))\n    .sort((a, b) => parseInt(a.floorNumber, 10) - parseInt(b.floorNumber, 10));\n\n  v.floors = floorsArray;\n\n  /********************************************************************\n   * 7) Return debug info\n   ********************************************************************/\n  return {\n    totalUnits : allUnits.length,\n    floorsCount: floorsArray.length,\n    floorsArray,\n    selectedType: v.selectedType,\n    selectedFeatures: v.selectedFeatures,\n    selectedFloorPlan: v.selectedFloorPlan,\n    totalFilteredFloorplans: filtered.length,\n    filteredFloorplans: filtered.map((f) => ({\n      name: f.name,\n      handle: f.handle,\n      availableUnits: f.availableUnits,\n      minPrice: f.minPrice\n    }))\n  };\n})();"}]},{"request":"JJ3zdtN6YvYYEZ3jhxhQ","id":"gHT63Ua5VVoXcetQXdgA","trigger":"after-request","actions":[{"id":"c2045f9b-608b-43ca-bb73-c78e33b83072","function":"  // 1) Parse the 'favorites' cookie (array of apt names like [\"203\",\"303\",...])\n  let favArray = [];\n  if (c.favorites) {\n    favArray = JSON.parse(c.favorites);\n  }\n\n  // 2) Use v.rawUnits or computedUnits to find matches\n  //    For a favorites page, rawUnits is typically best so we see them all.\n  const allUnits = v.rawUnits || [];\n\n  // 3) Filter down to those in the cookie\n  const favUnits = allUnits.filter((u) => favArray.includes(u.unit));\n\n  // 4) Store in v.favoriteUnits so we can repeat over it\n  v.favoriteUnits = favUnits;\n\n  // 5) Return some debug\n  return {\n    totalFavorites: favArray.length,\n    foundMatches: favUnits.length\n  };","type":"run-function"}],"name":"loadFavorites"},{"trigger":"condition","name":"updateParams","actions":[{"type":"run-function","function":"return (function() {\n  // 1) Gather the data you need (no changes here)\n  const type = (v.selectedType || \"\").toLowerCase();\n  const apt = v.selectedApt || \"\";\n  \n  let fpHandle = \"\";\n  if (apt) {\n    // If an apartment is selected, figure out its floorplan\n    const aptObj = v.filteredUnits?.[0]?.unit === apt \n      ? v.filteredUnits[0]\n      : (v.computedUnits || []).find(a => a.unit === apt);\n    fpHandle = aptObj?.floorplan?.[0]?.handle || \"\";\n  } else {\n    // If no apartment, fall back to v.selectedFloorPlan\n    fpHandle = v.selectedFloorPlan || \"\";\n  }\n\n  // If the user has selected features\n  const feats = Array.isArray(v.selectedFeatures) ? v.selectedFeatures : [];\n\n  // 2) Manually build an array of â€œkey=valueâ€ strings in your desired order\n  const segments = [];\n  \n  // In the order: type â†’ floorplan â†’ feature(s) â†’ apartment\n  if (type) {\n    segments.push(\"type=\" + encodeURIComponent(type));\n  }\n\n  if (fpHandle) {\n    segments.push(\"floorplan=\" + encodeURIComponent(fpHandle));\n  }\n\n  feats.forEach((f) => {\n    segments.push(\"feature=\" + encodeURIComponent(f));\n  });\n\n  // Put apartment last\n  if (apt) {\n    segments.push(\"apartment=\" + encodeURIComponent(apt));\n  }\n\n  // 3) Join them with â€œ&â€\n  const queryString = segments.join(\"&\");\n\n  // 4) Build the new URL\n  const newUrl = window.location.pathname + (queryString ? \"?\" + queryString : \"\");\n\n  // 5) Push the new URL to the browser without reloading\n  window.history.pushState({}, \"\", newUrl);\n\n  // 6) Return something for Wized's preview\n  return {\n    newUrl,\n    type,\n    fpHandle,\n    feats,\n    apt,\n    note: \"apartment param is always last\"\n  };\n})();","id":"253099f5-7fcd-41be-8529-183f33f63158"}],"condition":"return Boolean(v.doParamsUpdate);","id":"l5fxbbRH6oerA0uCVZw0"},{"request":"JJ3zdtN6YvYYEZ3jhxhQ","actions":[{"id":"3236ee86-0d60-41de-8778-e68439059739","type":"run-function","function":"// [Function: loadSightmap]\n// Combined logic: loads the blueprint, picks the first unitâ€™s tour, etc.\n\n// 1) Load the blueprint from your requestâ€™s data\nconst rawBlueprint = r.centroid_request?.data?.property?.blueprint || \"\";\nv.blueprintSVG = rawBlueprint;\n\n// 2) Clear any old tour URL\nv.selectedTour = \"\";\n\n// 3) If there are no filtered units, done:\nif (!v.filteredUnits || v.filteredUnits.length === 0) {\n  return \"No items in filteredUnits => no tour or blueprint highlight.\";\n}\n\n// 4) From the first item in v.filteredUnits, set v.selectedTour\nconst firstUnit = v.filteredUnits[0];\nv.selectedTour = firstUnit.tour || \"\";\n\n// 5) (Optional) Also store the apt so your highlight logic can use it\nv.selectedApt = firstUnit.unit || \"\";\n\n// 6) Return a debug message\nreturn `Blueprint length=${rawBlueprint.length}, selectedTour=${v.selectedTour}, selectedApt=${v.selectedApt}`;"}],"name":"loadBlueprint","trigger":"after-request","id":"lRGJVL2bpPBhevcQnpZe"},{"id":"nHYStkgGwZQC6A6W15pz","name":"filterFloorplans","trigger":"attribute-present","attribute":"wrapperFloorPlans","actions":[{"id":"707e4258-94c3-49ac-9725-35c6397fabb5","type":"run-function","function":"return (function() {\n  /********************************************************************\n    STEP 0: Merge rawUnits so we have the same shape as computedUnits\n  ********************************************************************/\n  const localCloned = JSON.parse(JSON.stringify(v.rawUnits || []));\n\n  function slugify(str) {\n    return (str || \"\")\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/^-+|-+$/g, \"\");\n  }\n\n  // Merge featuresImport + specials into each unit\n  localCloned.forEach((unit) => {\n    if (!Array.isArray(unit.features)) {\n      unit.features = [];\n    }\n    // A) Merge featuresImport\n    const fiArray = Array.isArray(unit.featuresImport) ? unit.featuresImport : [];\n    if (fiArray.length > 0) {\n      const fi = fiArray[0];\n      [\"interior\", \"exterior\", \"location\", \"extras\"].forEach((cat) => {\n        const rawStr = fi[cat] || \"\";\n        const items = rawStr.split(\",\").map(s => s.trim()).filter(Boolean);\n        items.forEach((name) => {\n          const handle = slugify(name);\n          if (!unit.features.some(f => f.handle === handle)) {\n            unit.features.push({ name, handle });\n          }\n        });\n      });\n    }\n    // B) Merge specials\n    const specials = Array.isArray(unit.specials) ? unit.specials : [];\n    specials.forEach((s) => {\n      const name = s.name || \"\";\n      const handle = s.handle || slugify(name);\n      if (!unit.features.some(f => f.handle === handle)) {\n        unit.features.push({ name, handle });\n      }\n    });\n  });\n\n  /********************************************************************\n    STEP 1: Use v.floorplans for the actual floorplan objects\n  ********************************************************************/\n  const data = v.floorplans || [];\n\n  /********************************************************************\n    STEP 2: Use the stored v.selectedType to filter floorplans\n  ********************************************************************/\n  // Use the stored value. It should be \"1-beds\" in your case.\n  const targetType = (v.selectedType || \"1-beds\").toLowerCase();\n  \n  let filtered = data.filter((fp) => {\n    // If the floorplan does not have a type property, skip it.\n    if (!fp.type) return false;\n\n    // Case A: If fp.type is a string\n    if (typeof fp.type === \"string\") {\n      return fp.type.toLowerCase() === targetType;\n    }\n    // Case B: If fp.type is an array\n    if (Array.isArray(fp.type)) {\n      return fp.type.some((t) => {\n        if (typeof t === \"string\") {\n          return t.toLowerCase() === targetType;\n        }\n        // Assume an object with a handle property\n        return (t.handle || \"\").toLowerCase() === targetType;\n      });\n    }\n    return false;\n  });\n\n  /********************************************************************\n    STEP 3: For each filtered floorplan, calculate available units and minPrice\n  ********************************************************************/\n  function unitHasFeatures(unit, selectedFeats) {\n    const unitFeats = (unit.features || []).map(f => f.handle);\n    const fpFeats = (unit.floorplan?.[0]?.features || []).map(f => f.handle);\n    const combined = new Set([...unitFeats, ...fpFeats]);\n    // Return true only if the unit has every selected feature (AND logic)\n    return selectedFeats.every(feat => combined.has(feat));\n  }\n\n  const selectedFeats = Array.isArray(v.selectedFeatures) ? v.selectedFeatures : [];\n\n  v.filteredFloorplans = filtered.map((fp) => {\n    const fpHandleLower = (fp.handle || \"\").toLowerCase();\n\n    // All units that match this floorplan\n    const planUnits = localCloned.filter((u) => {\n      const planHandle = (u.floorplan?.[0]?.handle || \"\").toLowerCase();\n      return planHandle === fpHandleLower;\n    });\n\n    let matchingFeatsUnits = planUnits;\n    if (selectedFeats.length > 0) {\n      matchingFeatsUnits = planUnits.filter((u) => unitHasFeatures(u, selectedFeats));\n    }\n\n    const availableUnits = matchingFeatsUnits.length;\n    let minPrice = 0;\n    if (availableUnits > 0) {\n      const rents = matchingFeatsUnits.map((u) => {\n        const cleaned = (u.minrent || \"\").replace(/[^0-9.]/g, \"\");\n        return parseFloat(cleaned) || 0;\n      });\n      minPrice = Math.min(...rents);\n    }\n\n    return {\n      ...fp,\n      availableUnits,\n      minPrice\n    };\n  });\n\n  /********************************************************************\n    STEP 4: Optional sorting: Floorplans with available units come first\n  ********************************************************************/\nv.filteredFloorplans.sort((a, b) => {\n  if ((a.availableUnits > 0 && b.availableUnits > 0) || (a.availableUnits === 0 && b.availableUnits === 0)) {\n    const [aPrefix, aNum] = (a.name || \"\").match(/([A-Za-z]+)(\\d+)/)?.slice(1) || [\"\", \"0\"];\n    const [bPrefix, bNum] = (b.name || \"\").match(/([A-Za-z]+)(\\d+)/)?.slice(1) || [\"\", \"0\"];\n    const prefixCompare = aPrefix.localeCompare(bPrefix, undefined, { sensitivity: \"base\" });\n    return prefixCompare !== 0 ? prefixCompare : Number(aNum) - Number(bNum);\n  }\n  if (a.availableUnits > 0 && b.availableUnits === 0) return -1;\n  if (a.availableUnits === 0 && b.availableUnits > 0) return 1;\n  return 0;\n});\n\n  /********************************************************************\n    STEP 5: Return debug info for Preview\n  ********************************************************************/\n  return {\n    storedSelectedType: v.selectedType,\n    debugTargetType: targetType,\n    totalFiltered: v.filteredFloorplans.length,\n    filteredFloorplans: v.filteredFloorplans.map(fp => ({\n      name: fp.name,\n      handle: fp.handle,\n      availableUnits: fp.availableUnits,\n      minPrice: fp.minPrice\n    }))\n  };\n})();"}]},{"id":"ph62SKXoZuFcgtwMsnpC","name":"loadSplide","trigger":"condition","condition":"return (function() {\n  // If we never want the function to run unless computedMedia is \"photos,\"\n  // then return false any time it's not \"photos.\"\n  if (v.computedMedia !== \"photos\") {\n    return false;\n  }\n  \n  // Otherwise, return a string that changes whenever v.selectedApt changes.\n  // The string will always be truthy (unless you want to handle empty differently),\n  // ensuring the function re-fires on each change of selectedApt.\n  return `photos:${v.selectedApt || \"no-unit-selected\"}`;\n})();","actions":[{"id":"8ad38c33-69f8-41ab-b440-2051d52ccff0","type":"run-function","function":"return (function() {\n  // 1) Check if reinitSplide is available\n  if (typeof window.reinitSplide === \"function\") {\n    // 2) Delay so Wized has time to render <li> slides\n    setTimeout(() => {\n      window.reinitSplide();\n    }, 300);\n\n    return \"Reinited Splide after 300 ms delay.\";\n  }\n\n  return \"No window.reinitSplide found => skipping.\";\n})();"}]},{"actions":[{"id":"9a067874-0b1e-4db1-a9a5-a88ce46e20c2","type":"run-function","function":"return (aptName) => {\n  const aptItem = v.computedUnits.find((x) => x.unit === aptName) || {};\n  const apartment = aptItem.unit || aptName || \"\";\n  let floorplan = \"\";\n  if (aptItem.floorplan && aptItem.floorplan.length) {\n    floorplan = aptItem.floorplan[0].handle || \"\";\n  }\n\n  // Update the URL\n  window.history.pushState({}, \"\", `/center?type=${type}&floorplan=${floorplan}&apartment=${apartment}`);\n\n  // Set the selected apt\n  v.selectedApt = apartment;\n\n  // Return something\n  return apartment;\n};"}],"id":"qeHZtif8CsLH5TnHzCE2","trigger":"after-request","request":"JJ3zdtN6YvYYEZ3jhxhQ","name":"selectApartment"},{"id":"rJYALWif34mtUw1qGJBe","name":"loadPageTitle","trigger":"after-request","request":"JJ3zdtN6YvYYEZ3jhxhQ","actions":[{"id":"85c66500-dc3b-4ced-8baa-592ac26dcd31","type":"run-function","function":"return (() => {\n  /*******************************************************************\n   * 0) If we've already done a fallback, skip\n   *******************************************************************/\n  if (v.didOneRedirect) {\n    return \"Already redirected once => skip.\";\n  }\n\n  /*******************************************************************\n   * 1) Gather the userâ€™s selected apt & type\n   *******************************************************************/\n  const apt = (v.selectedApt || \"\").trim();\n  const bedType = (v.selectedType || \"\").toLowerCase() || \"studios\";\n\n  if (!apt) {\n    return \"No apt => no fallback needed.\";\n  }\n\n  /*******************************************************************\n   * 2) Check if apt is actually available\n   *******************************************************************/\n  const allUnits = v.computedUnits || [];\n  const foundApt = allUnits.find(u => {\n    return (\n      (u.unit || \"\").trim() === apt &&\n      (u.status === \"1\" || u.status === \"available\")\n    );\n  });\n\n  if (foundApt) {\n    return `Apt ${apt} is available => no fallback.`;\n  }\n\n  /*******************************************************************\n   * 3) Apt is unavailable => fallback to ?type=XXX\n   *    We ensure no leftover floorplan param is in the new URL.\n   *******************************************************************/\n  // Clear the user's floorplan selection in memory\n  v.selectedFloorplanIds = [];\n  // Also clear the apartment so we don't cause repeated checks\n  v.selectedApt = \"\";\n\n  const fallbackUrl = `/center?type=${bedType}`;\n\n  /*******************************************************************\n   * 4) If we're already on that path => skip\n   *******************************************************************/\n  const currentPath = window.location.pathname + window.location.search;\n  if (currentPath === fallbackUrl) {\n    return \"Already on fallback => skip.\";\n  }\n\n  /*******************************************************************\n   * 5) Mark we did a redirect & do client-side â€œreplaceStateâ€\n   *******************************************************************/\n  v.didOneRedirect = true;\n  window.history.replaceState({}, \"\", fallbackUrl);\n\n  return `Apt ${apt} not available => replaced URL with ${fallbackUrl} & cleared floorplans.`;\n})();"}]},{"request":"JJ3zdtN6YvYYEZ3jhxhQ","actions":[{"id":"77e5d864-e56a-4fce-af12-962f92aae262","function":"return (() => {\n  /*******************************************************************\n   * 0) If we've already done a fallback, skip\n   *******************************************************************/\n  if (v.didOneRedirect) {\n    return \"Already redirected once => skip.\";\n  }\n\n  /*******************************************************************\n   * 1) Gather the userâ€™s selected apt & type\n   *******************************************************************/\n  const apt = (v.selectedApt || \"\").trim();\n  const bedType = (v.selectedType || \"\").toLowerCase() || \"studios\";\n\n  if (!apt) {\n    return \"No apt => no fallback needed.\";\n  }\n\n  /*******************************************************************\n   * 2) Check if apt is actually available\n   *******************************************************************/\n  const allUnits = v.computedUnits || [];\n  const foundApt = allUnits.find(u => {\n    return (\n      (u.unit || \"\").trim() === apt &&\n      (u.status === \"1\" || u.status === \"available\")\n    );\n  });\n\n  if (foundApt) {\n    return `Apt ${apt} is available => no fallback.`;\n  }\n\n  /*******************************************************************\n   * 3) Apt is unavailable => fallback to ?type=XXX\n   *    We ensure no leftover floorplan param is in the new URL.\n   *******************************************************************/\n  // Clear the user's floorplan selection in memory\n  v.selectedFloorplanIds = [];\n  // Also clear the apartment so we don't cause repeated checks\n  v.selectedApt = \"\";\n\n  const fallbackUrl = `/center?type=${bedType}`;\n\n  /*******************************************************************\n   * 4) If we're already on that path => skip\n   *******************************************************************/\n  const currentPath = window.location.pathname + window.location.search;\n  if (currentPath === fallbackUrl) {\n    return \"Already on fallback => skip.\";\n  }\n\n  /*******************************************************************\n   * 5) Mark we did a redirect & do client-side â€œreplaceStateâ€\n   *******************************************************************/\n  v.didOneRedirect = true;\n  window.history.replaceState({}, \"\", fallbackUrl);\n\n  return `Apt ${apt} not available => replaced URL with ${fallbackUrl} & cleared floorplans.`;\n})();","type":"run-function"}],"trigger":"after-request","id":"tQ9xBHen8l3XGKM5HIDU","name":"redirectIfUnavailable"},{"id":"ytFzS3Kc8Jfm7vGrQT0t","name":"insertHomepageLD","trigger":"page-complete","actions":[{"disabled":true,"id":"b0493ae9-224a-48b9-97be-c218957ea6c4","type":"run-function","function":"return (() => {\n  const complexSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"ApartmentComplex\",\n    \"name\": \"Southsider Apartments\",\n    \"url\": \"https://www.southsidermpls.com/center?type=\" + encodeURIComponent(paramType),\n    \"address\": {\n      \"@type\": \"PostalAddress\",\n      \"streetAddress\": \"3029 22nd Ave S\",\n      \"addressLocality\": \"Minneapolis\",\n      \"addressRegion\": \"MN\",\n      \"postalCode\": \"55407\",\n      \"addressCountry\": \"US\"\n    }\n  };\n\n  const ldString = JSON.stringify(homepageSchema);\n\n  document.head.insertAdjacentHTML(\n    \"beforeend\",\n    `<script id=\"homepageJsonLd\" type=\"application/ld+json\">${ldString}</script>`\n  );\n\n  return \"Homepage JSON-LD inserted.\";\n})();"}]},{"actions":[{"variable":"lwj5ZKYVoGqYGi2SfP6i","value":"return (function() {\n  // 1) Ensure v.computedUnits is an array\n  const units = Array.isArray(v.computedUnits) ? v.computedUnits : [];\n\n  // 2) Create an object to store { floorPlanHandle: description }\n  const planDescMap = {};\n\n  // 3) Loop through each unit and record the first floorplanâ€™s handle + unit.description\n  units.forEach((u) => {\n    const fp = u.floorplan?.[0];\n    if (!fp || !fp.handle) {\n      return;\n    }\n    const handle = fp.handle.toLowerCase(); // or keep original case\n    const desc = u.description || \"\";\n\n    // Store only if not already set\n    if (!planDescMap[handle]) {\n      planDescMap[handle] = desc;\n    }\n  });\n\n  // 4) Return the resulting object\n  return planDescMap;\n})();","id":"c51143de-bdf9-4809-a694-73fa28c9208a","type":"set-variable"}],"id":"zaZc5ZMG4VNFQcykDFIy","request":"JJ3zdtN6YvYYEZ3jhxhQ","trigger":"after-request","name":"getFloorPlanDescriptions"}],"requests":[{"id":"JJ3zdtN6YvYYEZ3jhxhQ","number":1,"name":"centroid_request","appId":"hdLDqn5x5NPvHLOjD912","type":"rest","method":"get","endpoint":"return 'ping?id=%%ID%%&token=%%TOKEN%%';","credentials":"omit"}]});
